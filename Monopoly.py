import discord
from discord.ext import commands
import os
import sqlite3
import time
import shutil
import asyncio
import random
import AkariDB as adb
from _collections import defaultdict
import re
import logging

DIR = os.path.dirname(__file__)
db = sqlite3.connect(os.path.join(DIR, "Monopoly.db"))
SQL = db.cursor()
log = logging.getLogger('Monopoly')
log.setLevel(logging.INFO)
if not os.path.exists('logs'):
    os.mkdir('logs')
fh = logging.FileHandler(f'logs/Monopoly-{time.strftime("%d.%m.%Y %H.%M", time.localtime())}.txt')
fh.setLevel(logging.INFO)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
fh.setFormatter(formatter)
log.addHandler(fh)
moves = ['–°–ª–µ–¥—É—é—â–∏–º —Ö–æ–¥–∏—Ç: {0}', '{0}, –≤–∞—à —Ö–æ–¥!']
emos = ['ü§™', 'ü•ê', 'üå≠', 'ü¶Ñ', 'ü§¨', 'üõ∂', 'üì°']
ai_names = ['Bot Dima', 'Bot Max', 'Bot Danil', 'Bot Ilyuha']
ai_emos = ['ü§ñ', 'üñ≤Ô∏è', 'üóúÔ∏è', 'üöΩ']
slap = '<:msh:830690670955331585>'
phrases = adb.phrasestxt
cube_values = ['ü¶Ø',  'ü•¢', 'üö¶', 'üéõÔ∏è', 'üåø', 'üçá']
cube_values2 = [':one:', ':two:', ':three:', ':four:', ':five:', ':six:']
cube_numbers = [':zero:', ':one:', ':two:', ':three:', ':four:', ':five:', ':six:', ':seven:', ':eight:', ':nine:']
player_colors = ['<:yellow:830416641309278238>', '<:lime:830416640939917362>', '<:red:830416640918159370>', '<:green:830416640884867072>', '<:blue:830416640805044254>', '<:orange:830416640956170240>', '<:purple:830416640428605440>']
player_color_icons = [['<:yellow1:830487866789724190>', '<:yellow2:830487866873610271>', '<:yellow3:830487867436433428>', '<:yellow4:830487867418869800>', '<:yellow5:830487867745894472>'],
                      ['<:lime1:830487866806239262>', '<:lime2:830487866890518618>', '<:lime3:830487866815414273>', '<:lime4:830487866999832596>', '<:lime5:830487868362326076>'],
                      ['<:red1:830487867008614449>', '<:red2:830487867532640340>', '<:red3:830487867016478721>', '<:red4:830487867524382800>', '<:red5:830487867813134366>'],
                      ['<:green1:830487866819608636>', '<:green2:830487866672414770>', '<:green3:830487867196178492>', '<:green4:830487866857488385>', '<:green5:830487867666071582>'],
                      ['<:blue1:830487866747387985>', '<:blue2:830487866341195777>', '<:blue3:830487867389509662>', '<:blue4:830487866698235945>', '<:blue5:830487867473395713>'],
                      ['<:orange1:830487867041644554>', '<:orange2:830487866856570891>', '<:orange3:830487867075723275>', '<:orange4:830487867205091378>', '<:orange5:830487867839086632>'],
                      ['<:purple1:830487867015823421>', '<:purple2:830487867201290320>', '<:purple3:830487867997552640>', '<:purple4:830487866827604009>', '<:purple5:830487867670265907>']]
locked_icons = ['<:yellowl:830487866849230910>', '<:limel:830487866370031627>', '<:redl:830487866944651304>', '<:greenl:830487866353516636>', '<:bluel:830487866773209106>', '<:orangel:830487866655637535>', '<:purplel:830487867012677682>']
shop_levels = ['', '¬π', '¬≤', '¬≥', '‚Å¥', '‚Åµ']
all_shops = [{'name': 'Sweetees', 'length': 3, 'special': '', 'shops': [
          {'name': 'Nestle', 'mon_name': 'Sweetees', 'buyfor': 2200, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': 'nes', 'special': {}},
          {'name': 'Danone', 'mon_name': 'Sweetees', 'buyfor': 1500, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': 'dan', 'special': {}},
          {'name': 'Mondelez Int.', 'mon_name': 'Sweetees', 'buyfor': 1600, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': 'mon', 'special': {}}]},
        {'name': 'Messengers', 'length': 4, 'special': '', 'shops': [
          {'name': 'Telegram', 'mon_name': 'Messengers', 'buyfor': 2000, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': 'tel', 'special': {}},
          {'name': 'WhatsApp', 'mon_name': 'Messengers', 'buyfor': 1500, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': 'wha', 'special': {}},
          {'name': 'Clubhouse', 'mon_name': 'Messengers', 'buyfor': 1400, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': 'clu', 'special': {}},
          {'name': 'WeChat', 'mon_name': 'Messengers', 'buyfor': 1700, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': 'wec', 'special': {}}]},
        {'name': 'CPUs', 'length': 2, 'special': '', 'shops': [
          {'name': 'Intel', 'mon_name': 'CPUs', 'buyfor': 2800, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': 'int', 'special': {}},
          {'name': 'AMD', 'mon_name': 'CPUs', 'buyfor': 3600, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': 'amd', 'special': {}}]},
        {'name': 'Technics', 'length': 3, 'special': '', 'shops': [
          {'name': '–¢–µ—Ö–Ω–æ—Å–∏–ª–∞', 'mon_name': 'Technics', 'buyfor': 1500, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': 'tec', 'special': {'vin': '–¢–µ—Ö–Ω–æ—Å–∏–ª—É', 'rod': '–¢–µ—Ö–Ω–æ—Å–∏–ª—ã'}},
          {'name': '–≠–ª—å–¥–æ—Ä–∞–¥–æ', 'mon_name': 'Technics', 'buyfor': 2000, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': 'eld', 'special': {}},
          {'name': '–ú.–í–∏–¥–µ–æ', 'mon_name': 'Technics', 'buyfor': 3200, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': 'mvi', 'special': {}}]},
        {'name': 'Space', 'length': 3, 'special': '', 'shops': [
          {'name': 'SpaceX', 'mon_name': 'Space', 'buyfor': 3500, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': 'spa', 'special': {}},
          {'name': 'NASA', 'mon_name': 'Space', 'buyfor': 2900, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': 'nas', 'special': {}},
          {'name': '–†–æ—Å–∫–æ—Å–º–æ—Å', 'mon_name': 'Space', 'buyfor': 2000, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': 'ros', 'special': {'rod':'–†–æ—Å–∫–æ—Å–º–æ—Å–∞'}}]},
        {'name': 'Social Networks', 'length': 5, 'special': '', 'shops': [
          {'name': '–í–∫–æ–Ω—Ç–∞–∫—Ç–µ', 'mon_name': 'Social Networks', 'buyfor': 3000, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': 'vko', 'special': {}},
          {'name': 'Facebook', 'mon_name': 'Social Networks', 'buyfor': 4000, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': 'fac', 'special': {}},
          {'name': 'Reddit', 'mon_name': 'Social Networks', 'buyfor': 1800, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': 'red', 'special': {}},
          {'name': 'Twitter', 'mon_name': 'Social Networks', 'buyfor': 2200, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': 'twi', 'special': {}},
          {'name': 'Instagram', 'mon_name': 'Social Networks', 'buyfor': 3000, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': 'ins', 'special': {}}]},
        {'name': 'Smartphones', 'length': 4, 'special': 'shuffled', 'shops': [
          {'name': 'Xiaomi', 'mon_name': 'Smartphones', 'buyfor': 4000, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': 'xia', 'special': {}},
          {'name': 'Nokia', 'mon_name': 'Smartphones', 'buyfor': 2500, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': 'nok', 'special': {}},
          {'name': 'Apple', 'mon_name': 'Smartphones', 'buyfor': 6000, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': 'app', 'special': {}},
          {'name': 'Samsung', 'mon_name': 'Smartphones', 'buyfor': 3000, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': 'sam', 'special': {}}]},
        {'name': 'Railways', 'length': 4, 'special': '', 'shops': [
          {'name': '–†–ñ–î', 'mon_name': 'Railways', 'buyfor': 4000, 'mortgage': [0, 0, 0, 0, 0, 500], 'up': 0, 'brief': 'pzd', 'special': {}},
          {'name': 'Eurostar', 'mon_name': 'Railways', 'buyfor': 2500, 'mortgage': [0, 0, 0, 0, 0, 325], 'up': 0, 'brief': 'eur', 'special': {}},
          {'name': 'Bane NOR', 'mon_name': 'Railways', 'buyfor': 2000, 'mortgage': [0, 0, 0, 0, 0, 250], 'up': 0, 'brief': 'ban', 'special': {}},
          {'name': 'JR', 'mon_name': 'Railways', 'buyfor': 5000, 'mortgage': [0, 0, 0, 0, 0, 625], 'up': 0, 'brief': 'jr', 'special': {}}]},
        {'name': 'Cars', 'length': 2, 'special': '', 'shops': [
          {'name': 'Bentley', 'mon_name': '', 'buyfor': 4000, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': 'ben', 'special': {}},
          {'name': 'Aston Martin', 'mon_name': '', 'buyfor': 4500, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': 'ast', 'special': {}}]},
        {'name': 'Fastfood', 'length': 3, 'special': '', 'shops': [
          {'name': 'KFC', 'mon_name': 'Fastfood', 'buyfor': 3000, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': 'kfc', 'special': {}},
          {'name': 'Burger King', 'mon_name': 'Fastfood', 'buyfor': 2000, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': 'bur', 'special': {}},
          {'name': "McDonald's", 'mon_name': 'Fastfood', 'buyfor': 2600, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': 'mac', 'special': {}}]},
        {'name': 'TV', 'length': 2, 'special': 'add', 'shops': [
          {'name': 'NETFLIX', 'mon_name': 'TV', 'buyfor': 2600, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': 'net', 'special': {}},
          {'name': 'Walt Disney', 'mon_name': 'TV', 'buyfor': 3000, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': 'dis', 'special': {}}]},
        {'name': 'Supermarkets', 'length': 4, 'special': 'add', 'shops': [
          {'name': '–ü—è—Ç—ë—Ä–æ—á–∫–∞', 'mon_name': 'Supermarkets', 'buyfor': 3200, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': 'pya', 'special': {'vin': '–ü—è—Ç—ë—Ä–æ—á–∫—É', 'rod':'–ü—è—Ç—ë—Ä–æ—á–∫–∏'}},
          {'name': '–ü–µ—Ä–µ–∫—Ä—ë—Å—Ç–æ–∫', 'mon_name': 'Supermarkets', 'buyfor': 2200, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': 'per', 'special': {'rod':'–ü–µ—Ä–µ–∫—Ä—ë—Å—Ç–∫–∞'}},
          {'name': '–î–∏–∫—Å–∏', 'mon_name': 'Supermarkets', 'buyfor': 2500, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': 'dik', 'special': {}},
          {'name': '–õ–µ–Ω—Ç–∞', 'mon_name': 'Supermarkets', 'buyfor': 2700, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': 'len', 'special': {'vin': '–õ–µ–Ω—Ç—É', 'rod':'–õ–µ–Ω—Ç—ã'}}]},
        {'name': 'Consoles', 'length': 3, 'special': 'add', 'shops': [
          {'name': 'Sony', 'mon_name': 'Consoles', 'buyfor': 4200, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': 'son', 'special': {}},
          {'name': 'Microsoft', 'mon_name': 'Consoles', 'buyfor': 5000, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': 'mic', 'special': {}},
          {'name': 'Nintendo', 'mon_name': 'Consoles', 'buyfor': 3000, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': 'nin', 'special': {}}]},
        {'name': 'Disabled', 'length': 2, 'special': 'add', 'shops': [
          {'name': '', 'mon_name': '', 'buyfor': 0, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': '', 'special': {}},
          {'name': '', 'mon_name': '', 'buyfor': 0, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': '', 'special': {}}]},
        {'name': 'Disabled', 'length': 4, 'special': 'add', 'shops': [
          {'name': '', 'mon_name': '', 'buyfor': 0, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': '', 'special': {}},
          {'name': '', 'mon_name': '', 'buyfor': 0, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': '', 'special': {}},
          {'name': '', 'mon_name': '', 'buyfor': 0, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': '', 'special': {}},
          {'name': '', 'mon_name': '', 'buyfor': 0, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': '', 'special': {}}]},
        {'name': 'Coffee', 'length': 3, 'special': 'add', 'shops': [
          {'name': 'Cofix', 'mon_name': 'Coffee', 'buyfor': 1500, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': 'cof', 'special': {}},
          {'name': 'Starbucks', 'mon_name': 'Coffee', 'buyfor': 2300, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': 'sta', 'special': {}},
          {'name': 'Coffee Brain', 'mon_name': 'Coffee', 'buyfor': 1900, 'mortgage': [0, 0, 0, 0, 0, 0], 'up': 0, 'brief': 'cob', 'special': {}}]}]


def iconfinder(emoji):
    icons = []
    for i in range(6):
        try:
            if i == 0:
                icon = SQL.execute(f"SELECT eid FROM monop_emos WHERE emoji = '{emoji}'").fetchone()[0]
                icons.append(f'<:{emoji}:{icon}>')
            else:
                icon = SQL.execute(f"SELECT eid FROM monop_emos WHERE emoji = '{emoji}{i}'").fetchone()[0]
                icons.append(f'<:{emoji}{i}:{icon}>')
        except Exception as e:
            print(e)
    return icons


class Monopoly(commands.Cog):
    """docstring for Monopoly"""

    def __init__(self, bot):
        self.bot = bot
        self.monop_channelid = adb.monopolishe
        self.monop_channel = None
        self.maptype = 0
        self.map = None
        self.mapmes = None
        self.playmes = None
        self.infomes = None
        self.sellmes = None
        self.stockmes = None
        self.trademes = None
        self.curblock = ''
        self.players = []
        self.player_colors = []
        self.w8react = []
        self.on = False
        self.ongame = {}
        self.credits = defaultdict(dict)
        self.pledges = defaultdict(dict)
        self.stocks = []
        self.upgradeFlag = False
        self.userlist = defaultdict(dict)
        self.emosdict = defaultdict(list)
        self.emos = []
        self.ai_emos = []
        self.ai_names = []
        self.timers = []
        dbAkari = sqlite3.connect(os.path.join(DIR, "Akari.db"))
        SQLA = dbAkari.cursor()
        SQLA.execute('SELECT * FROM emos')
        emos = SQLA.fetchall()
        for e in emos:
            if e[5]:
                code = f'<a:{e[0]}:{e[1]}>'
            else:
                code = f'<:{e[0]}:{e[1]}>'
            self.emosdict[e[2]].append(code)

    async def showmap(self):
        emb = discord.Embed(title='–ò–≥—Ä–æ–∫–∏', color=random.choice(adb.raincolors))
        for p in self.players:
            if not p.ikiru:
                text = f'–ú—ë—Ä—Ç–≤)) –û—á–∫–∏: {p.worth}'
                emb.add_field(name=f'{p.nick}', value=text, inline=False)
                continue
            text = f'${p.money}, –ø–æ–ª–æ–∂–µ–Ω–∏–µ: {p.cords}\n‚àë{p.get_netmort()}'
            if p.credit:
                text += f', –∫—Ä–µ–¥–∏—Ç: ${p.credit["money"]} ({p.credit["expires"]})'
            if p.stocks:
                text += f', –∞–∫—Ü–∏–π: {len(p.stocks)})'
            text += f'\n–û—á–∫–∏: {p.worth}'
            if p.slaps:
                text += f', {slap}{p.slaps}'
            if p.shops:
                text += f'\n–°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å: {p.show_shops()}'
            if p == self.ongame['cur_player']:
                if self.curblock:
                    emb.add_field(name=f'{p.nick}', value=text, inline=True)
                    if self.ongame['status'] == 'cubes':
                        emb.add_field(name=f'–¢–µ–∫—É—â–∏–π —Ö–æ–¥', value=f'–ë—Ä–æ—Å–∞–π—Ç–µ –∫—É–±–∏–∫!', inline=True)
                    else:
                        emb.add_field(name=f'–¢–µ–∫—É—â–∏–π —Ö–æ–¥', value=f'{self.curblock}', inline=True)
                    continue
            emb.add_field(name=f'{p.nick}', value=text, inline=False) # —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–æ–≤, –±–∞–ª–∞–Ω—Å, –∫–æ—Ä–¥—ã –∏ –∑–≤—ë–∑–¥—ã
        editFlag = False
        if self.mapmes:
            async for i in self.monop_channel.history(limit=7):
                if i.id == self.mapmes.id:
                    editFlag = True
        if editFlag:
            if self.playmes:
                try:
                    await self.playmes.edit(embed=emb)
                    if self.mapmes:
                        try:
                            await self.mapmes.edit(content=str(self.map))
                        except:
                            pass
                    else:
                        self.mapmes = await self.monop_channel.send(str(self.map))
                    return
                except:
                    pass
        if self.playmes:
            try:
                await self.playmes.delete()
            except:
                pass
        self.playmes = await self.monop_channel.send(embed=emb)
        if self.mapmes:
            try:
                await self.mapmes.delete()
            except:
                pass
        self.mapmes = await self.monop_channel.send(str(self.map))

    def update_player(self, player):
        for i, p in enumerate(self.players):
            if p.id == player.id:
                self.players[i] = player

    def finduser(self, pid):
        pid = str(pid).lower()
        for i in self.players:
            if pid in [i.name.lower(), i.men.lower(), str(i.id), i.icon.lower(), i.color.lower(), i.nick.lower()]:
                return i
            for j in [i.name.lower(), i.men.lower(), str(i.id), i.icon.lower(), i.color.lower(), i.nick.lower()]:
                if j in pid:
                    return i
        for i in self.userlist:
            if pid == str(self.userlist[i]['bbagid']) or pid in self.userlist[i]['name'].lower() or str(self.userlist[i]['roleid']) in pid:
                for p in self.players:
                    if self.userlist[i]['id'] == p.id:
                        return p

    async def action(self, mes, player, next_player):
        block = self.map.blocks[player.si]
        if block.cat == 'shop':
            if block.owner:
                if not block.buyback:
                    if block.owner.id != player.id:
                        mort = block.get_mort()
                        if player.money < mort:
                            nmort = player.get_sellmort()
                            if nmort < mort:
                                if self.ongame['crm_player']:
                                    if player != self.ongame['crm_player'] or self.ongame['criminal'] != 'polarize':
                                        mes2 = await self.monop_channel.send(f'{player.nick} –Ω–µ –º–æ–∂–µ—Ç –æ–ø–ª–∞—Ç–∏—Ç—å –∞—Ä–µ–Ω–¥—É {block.rodshop} {block.owner.nick}. –°–∫–æ—Ä–æ –∑–∞ –Ω–∏–º –ø—Ä–∏–¥—ë—Ç –•–∞—Ä–æ–Ω')
                                        await mes2.add_reaction('üíÄ')
                                        self.w8react.append(('death', mes2, player))
                        player.money -= mort
                        if self.ongame['crm_player']:
                            if player != self.ongame['crm_player'] and self.ongame['criminal'] == 'rob':
                                self.ongame['crm_player'].money += mort
                                self.ongame['crm_player'].worth += mort // 10
                                await self.monop_channel.send(f'{self.ongame["crm_player"].nick} —É–∫—Ä–∞–ª —É {player.nick} –∏ –µ–≥–æ –∞–∫—Ü–∏–æ–Ω–µ—Ä–æ–≤ ${mort}')
                                self.ongame['criminal'] = ''
                                self.update_player(self.ongame['crm_player'])
                                self.ongame['crm_player'] = None
                        else:
                            for p in self.players:
                                if p.id == self.map.blocks[player.si].owner.id:
                                    p.money += mort * (100 - sum([block.stocks[a] for a in block.stocks])) // 100
                                    p.worth += mort * (100 - sum([block.stocks[a] for a in block.stocks])) // 1000
                                    p.worth += mort * 3 * sum([block.stocks[a] for a in block.stocks]) // 1000
                                    self.update_player(p)
                                if p.id in block.stocks:
                                    p.money += mort * block.stocks[p.id] // 100
                                    self.update_player(p)
                            self.map.blocks[player.si].income += mort
                            await self.monop_channel.send(f'{player.nick} –ø–ª–∞—Ç–∏—Ç ${mort} {block.owner.nick} –≤ {block.vinshop}')
                    elif mes.content.lower().startswith('stocks'):
                        perc = int(mes.content.split('stocks')[1].split('%')[0])
                        if perc <= 100 - sum([block.stocks[a] for a in block.stocks]):
                            player.worth += 1000
                            self.stocks.append({'player': player.id, 'shop': block.shop, 'perc': perc, 'cost': int(block.worth * perc // 100)})
                            await self.monop_channel.send(f'{player.nick} –≤—ã—Å—Ç–∞–≤–∏–ª –Ω–∞ –±–∏—Ä–∂—É {perc}% {block.rodshop}')
            elif mes.content.lower().startswith('buy') or mes.content.lower().startswith('–∏–≥–Ω'):
                self.map.blocks[player.si].owner = player
                player.money -= block.cost
                player.shops.append(self.map.blocks[player.si])
                cur_monopoly = []
                for i in self.map.blocks:
                    if i.cat == 'shop':
                        if i.monopoly == block.monopoly:
                            cur_monopoly.append(i)
                create_monFlag = True
                for i in cur_monopoly:
                    if i.owner != player:
                        create_monFlag = False
                if create_monFlag:
                    for i in self.map.blocks:
                        if i in cur_monopoly:
                            i.in_monopoly = True
                            player.update_shop(i)
                    player.monopolies.append(block.monopoly)
                    player.worth += 1000
                player.worth += 500
                await self.monop_channel.send(f'{player.nick} –ø–æ–∫—É–ø–∞–µ—Ç {block.vinshop} –∑–∞ ${block.cost}')
        if block.cat == 'special':
            if block.type == 1:
                jailed = [p for p in self.players if p.jailed]
                j = self.finduser(mes.content)
                if j in jailed:
                    j.slaps += 1
                    player.worth += 200
                    await self.monop_channel.send(f'{player.nick} –¥–∞—ë—Ç –ø–æ—â—ë—á–∏–Ω—É {j.nick}')
                    self.update_player(j)
                if block.type == 2:
                    if mes.content.startswith('0'):
                        await self.monop_channel.send(f'{player.nick} –Ω–µ —Å—Ç–∞–ª –∑–∞—Ä—è–∂–∞—Ç—å —Ä–µ–≤–æ–ª—å–≤–µ—Ä. –•–æ—á–µ—Ç —Å–¥–æ—Ö–Ω—É—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ')
                        block.icon = block.icons[0]
                    if mes.content.startswith('1'):
                        cont = mes.content.split('1', maxsplit=1)[1].lstrip()
                        block.icon = block.icons[1]
                        if 1 >= random.randint(1, 6):
                            mes2 = await self.monop_channel.send(f'{player.nick}, –≤–∞–º —Å–æ–ø—É—Ç—Å—Ç–≤—É–µ—Ç —É–¥–∞—á–∞! –í—ã —É–±–∏–ª–∏—Å—å —Å –æ–¥–Ω–æ–≥–æ –ø–∞—Ç—Ä–æ–Ω–∞! –ò, –≤–æ–æ–±—â–µ-—Ç–æ, —ç—Ç–æ –±—ã–ª –î–∏–≥–ª')
                            if cont:
                                await asyncio.sleep(2)
                                mes2 = await self.monop_channel.send(f'{player.nick} –¥–µ—Ä–∂–∞–ª –≤ —Ä—É–∫–∞—Ö –ø—Ä–æ—â–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å–∫—É. –ù–∞ –Ω–µ–π –±—ã–ª–æ –Ω–∞–ø–∏—Å–∞–Ω–æ: {cont}')
                            await mes2.add_reaction('üíÄ')
                            self.w8react.append(('suicide', mes2, player))
                        else:
                            player.worth += 100
                            player.money += 1000
                            self.update_player(j)
                            await self.monop_channel.send(f'{player.nick} –∑–∞—Ä—è–¥–∏–ª —Ä–µ–≤–æ–ª—å–≤–µ—Ä —Å 1 –ø–∞—Ç—Ä–æ–Ω–æ–º –∏, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–±–∏–ª—Å—è (+${1000})')
                    if mes.content.startswith('2'):
                        cont = mes.content.split('2', maxsplit=1)[1].lstrip()
                        block.icon = block.icons[2]
                        if 2 >= random.randint(1, 6):
                            mes2 = await self.monop_channel.send(f'{player.nick} –æ—á–µ–Ω—å —Ö–æ—Ç–µ–ª —Ä–µ–±—ë–Ω–∫–∞ –∏ —Å–¥–µ–ª–∞–ª —Å–µ–±–µ —Ü–µ–ª—É—é –æ—á–µ—Ä–µ–¥—å –∏–∑ –£–∑–∏')
                            if cont:
                                await asyncio.sleep(2)
                                mes2 = await self.monop_channel.send(f'{player.nick} –æ—Å—Ç–∞–≤–∏–ª –Ω–∞ —Å—Ç–æ–ª–µ –ø—Ä–æ—â–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å–∫—É. –ù–∞ –Ω–µ–π –±—ã–ª–æ –Ω–∞–ø–∏—Å–∞–Ω–æ: {cont}')
                            await mes2.add_reaction('üíÄ')
                            self.w8react.append(('suicide', mes2, player))
                        else:
                            player.worth += 300
                            player.money += 2000
                            self.update_player(j)
                            await self.monop_channel.send(f'{player.nick} —É–≤–µ—Ä–Ω—É–ª—Å—è –æ—Ç –¥–≤—É—Ö –ø—É–ª—å –∏–∑ —Ä–µ–≤–æ–ª—å–≤–µ—Ä–∞ (+${2000})')
                    if mes.content.startswith('3'):
                        cont = mes.content.split('3', maxsplit=1)[1].lstrip()
                        block.icon = block.icons[3]
                        if 3 >= random.randint(1, 6):
                            mes2 = await self.monop_channel.send(f'{player.nick} –∫—É–ø–∏–ª –∫–∞–ª–∞—à –Ω–∞ –ê–ª–∏—ç–∫—Å–ø—Ä–µ—Å—Å–µ. –û–Ω –æ–∫–∞–∑–∞–ª—Å—è –∑–∞—Ä—è–∂–µ–Ω. –ü—Ä–µ–¥–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è {player.nick} –∑–∞–±—ã–≤–∞–µ—Ç')
                            if cont:
                                await asyncio.sleep(2)
                                mes2 = await self.monop_channel.send(f'–ú—ã –Ω–∞—à–ª–∏ –∑–∞ —à–∫–∞—Ñ–æ–º –ø—Ä–æ—â–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å–∫—É {player.nick}. –ù–∞ –Ω–µ–π –±—ã–ª–æ –Ω–∞–ø–∏—Å–∞–Ω–æ: {cont}')
                            await mes2.add_reaction('üíÄ')
                            self.w8react.append(('suicide', mes2, player))
                        else:
                            player.worth += 900
                            player.money += 4000
                            self.update_player(j)
                            await self.monop_channel.send(f'{player.nick} –ø—Ä–æ–≥–ª–æ—Ç–∏–ª 3 –ø—É–ª–∏ —Å –∂–µ–ª–µ–∑–Ω—ã–º —Å–µ—Ä–¥–µ—á–Ω–∏–∫–æ–º –∏ —Ç–µ–ø–µ—Ä—å —É–º–µ–µ—Ç –Ω–∞–º–∞–≥–Ω–∏—á–∏–≤–∞—Ç—å –ª–æ–∂–∫–∏ –ø–µ—á–µ–Ω—å—é (+${4000})')
                    if mes.content.startswith('4'):
                        cont = mes.content.split('4', maxsplit=1)[1].lstrip()
                        block.icon = block.icons[4]
                        if 4 >= random.randint(1, 6):
                            mes2 = await self.monop_channel.send(f'{player.nick} –∑–∞—Ä—è–¥–∏–ª –æ—Ä—É–∂–∏–µ —Å 4... —Ç–∞–º –∂–µ –¥—Ä–æ–±–∏–Ω–∫–∏... –ê, —É–∂–µ –Ω–µ –≤–∞–∂–Ω–æ ')
                            if cont:
                                await asyncio.sleep(2)
                                mes2 = await self.monop_channel.send(f'{player.nick} –∑–∞–∫–æ–ø–∞–ª –≤ —Å–∞–¥—É –ø—Ä–æ—â–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å–∫—É. –ù–∞ –Ω–µ–π –±—ã–ª–æ –Ω–∞–ø–∏—Å–∞–Ω–æ: {cont}')
                            await mes2.add_reaction('üíÄ')
                            self.w8react.append(('suicide', mes2, player))
                        else:
                            player.worth += 2700
                            player.money += 8000
                            self.update_player(j)
                            await self.monop_channel.send(f'{player.nick} —Ö–æ—Ç–µ–ª –∂–∞—Ö–Ω—É—Ç—å —Å–µ–±–µ –≤ –≥–æ–ª–æ–≤—É –∏–∑ –¥—Ä–æ–±–æ–≤–∏–∫–∞, –Ω–æ –¥—Ä–æ–±–æ–≤–∏–∫ –æ—Ç–∫–∞–∑–∞–ª—Å—è (+${8000})')
                    if mes.content.startswith('5'):
                        cont = mes.content.split('5', maxsplit=1)[1].lstrip()
                        block.icon = block.icons[5]
                        if 5 >= random.randint(1, 6):
                            mes2 = await self.monop_channel.send(f'{player.nick} –¥–æ—Å—Ç–∞–ª —Ç—è–∂—ë–ª—É—é –∞—Ä—Ç–∏–ª–ª–µ—Ä–∏—é. –û–Ω –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª, –∫–∞–∫ –∑–∞—Å—Ç—Ä–µ–ª–∏—Ç—å—Å—è —Å –º–∏–Ω–∏–≥–∞–Ω–∞, —É—Ä–æ–Ω–∏–ª –µ–≥–æ –Ω–∞ –Ω–æ–≥—É, —É–ø–∞–ª –∏ —É–¥–∞—Ä–∏–ª—Å—è –≥–æ–ª–æ–≤–æ–π')
                            if cont:
                                await asyncio.sleep(2)
                                mes2 = await self.monop_channel.send(f'{player.nick} –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–ª –ø—Ä–æ—â–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å–∫—É –∏ —Ö—Ä–∞–Ω–∏–ª –≤ –æ–±–ª–∞–∫–µ. –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Å–º–æ–≥–ª–∏ –µ—ë —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å: {cont}')
                            await mes2.add_reaction('üíÄ')
                            self.w8react.append(('suicide', mes2, player))
                        else:
                            player.worth += 8100
                            player.money += 16000
                            self.update_player(j)
                            await self.monop_channel.send(f'{player.nick} –∑–∞—Ä—è–¥–∏–ª —Ä–µ–≤–æ–ª—å–≤–µ—Ä —Å 5 –ø–∞—Ç—Ä–æ–Ω–∞–º–∏ –∏ –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è, –∫–æ–≥–¥–∞ –ø—Ä–∏—Å—Ç–∞–≤–ª—è–ª –¥—É–ª–æ –∫ –≥–æ–ª–æ–≤–µ. –ü–æ—Ç–æ–º –®—Ç–∏—Ä–ª–∏—Ü –∑–∞–∫—Ä—ã–ª –æ–∫–Ω–æ. –î—É–ª–æ –∏—Å—á–µ–∑–ª–æ. –•–∞—Ö–∞ (+${16000})')
                    if mes.content.startswith('6'):
                        cont = mes.content.split('6', maxsplit=1)[1].lstrip()
                        block.icon = block.icons[6]
                        if adb.chance(5, 1000):
                            mes2 = await self.monop_channel.send(f'{player.nick}, –∂–∏—Ç—å –Ω–∞–¥–æ–µ–ª–æ? –ù–µ–ª—å–∑—è –∑–∞—Ä—è–∂–∞—Ç—å 6!!! –ê —Ö–æ—Ç—è –ø–æ—á–µ–º—É –Ω–µ–ª—å–∑—è? –í–æ—Ç, —Ç–æ–ª—å–∫–æ —Å—Ä–∞–∑—É –Ω–µ —Å—Ç...')
                            if cont:
                                await asyncio.sleep(2)
                                mes2 = await self.monop_channel.send(f'–°—Ä–µ–¥–∏ –æ–±–ª–æ–º–∫–æ–≤ –¥–æ–º–∞ {player.nick} –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–æ—â–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å–∫–∞. –ù–∞ –Ω–µ–π –Ω–∞–ø–∏—Å–∞–Ω–æ: {cont}')
                            await mes2.add_reaction('üíÄ')
                            self.w8react.append(('suicide', mes2, player))
                        else:
                            player.worth += 24300
                            player.money += 32000
                            self.update_player(j)
                            await self.monop_channel.send(f'–£ {player.nick} —Ä–∞–∑–æ—Ä–≤–∞–ª–∞—Å—å —Ä–∞–∫–µ—Ç–∞ –≤ —Å—Ç–≤–æ–ª–µ –≥—Ä–∞–Ω–∞—Ç–æ–º—ë—Ç–∞. –ö —Å—á–∞—Å—Ç—å—é, –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–∞—Ö–æ–¥–∏–ª—Å—è –¥–∞–ª–µ–∫–æ –≤ –ö–∏—Ç–∞–µ. –ù–µ –ø–æ–∫—É–ø–∞–π—Ç–µ, –≤—Å—ë-—Ç–∞–∫–∏, –æ—Ä—É–∂–∏–µ –Ω–∞ Aliexpress (+${32000})')
                    self.map.blocks[player.si] = block
                if block.type == 4:
                    if self.ongame['criminal'] == 'bomb':
                        self.ongame['criminal'] = ''
                        self.ongame['crm_player'] = None
                        if 'bomb' in mes.content:
                            blow_to = self.finduser(mes.content.split('bomb')[1].lstrip())
                        else:
                            blow_to = self.finduser(mes.content)
                        if not blow_to.shops:
                            await self.monop_channel.send(f'–í–∑—Ä—ã–≤–∞—Ç—å –Ω–µ—á–µ–≥–æ((((( –£ {blow_to.nick} –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤. –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ —Ç–µ—Ä—Ä–æ—Ä–∏—Å—Ç—ã –∑–∞–ø–ª–∞—Ç—è—Ç –≤–∞–º $4000')
                            player.worth += 2000
                            player.money += 4000
                            self.update_player(player)
                        else:
                            blow_what = random.choice(blow_to.shops)
                            blow_who = []
                            for p in self.players:
                                if p.cords == blow_what.cords:
                                    blow_who.append(p)
                            ruin = Special(blow_what.cords, 5)
                            ruin.desc = f'–ó–¥–∞–Ω–∏–µ —Ñ–∏—Ä–º—ã {blow_what.shop} (—Ä–∞–∑—Ä—É—à–µ–Ω–æ)'
                            res = f'–ó–¥–∞–Ω–∏–µ {blow_what.rodshop} –∏–≥—Ä–æ–∫–∞ {blow_to.nick} –≤–∑–æ—Ä–≤–∞–Ω–æ!'
                            if len(blow_who) == 1:
                                res += f' –í –∑–¥–∞–Ω–∏–∏ –Ω–∞—Ö–æ–¥–∏–ª—Å—è {blow_who[0].nick}, –∫–æ—Ç–æ—Ä–æ–º—É {player.nick} –≤—ã–ø–ª–∞—Ç–∏–ª $2000'
                            elif len(blow_who) > 1:
                                res += f' –í –∑–¥–∞–Ω–∏–∏ –Ω–∞—Ö–æ–¥–∏–ª–∏—Å—å {", ".join([p.nick for p in blow_who])}, –∫–æ—Ç–æ—Ä—ã–º {player.nick} –≤—ã–ø–ª–∞—Ç–∏–ª –ø–æ $2000'
                            for p in blow_who:
                                player.money -= 2000
                                p.money += 2000
                                self.update_player(p)
                            for j in range(len(self.map.blocks)):
                                if self.map.blocks[j].cords == blow_what.cords:
                                    p = self.map.blocks[j].owner
                                    wth = 2000 + int(self.map.blocks[j].worth * 1.5)
                                    p.money += self.map.blocks[j].worth // 4
                                    res += f'\n{p.nick} –ø–æ–ª—É—á–∏–ª {self.map.blocks[j].worth // 4} –æ—Ç –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞.'
                                    del p.shops[p.shops.index(self.map.blocks[j])]
                                    self.update_player(p)
                                    self.map.blocks[j] = ruin
                            res += f' {player.nick} –∏ —Ç–µ—Ä—Ä–æ—Ä–∏—Å—Ç—ã –≤—ã–Ω–µ—Å–ª–∏ {wth - len(blow_who) * 2000}'
                            player.worth += wth
                            player.money += wth
                            await self.monop_channel.send(res)
                    if self.ongame['criminal'] == 'stock':
                        self.ongame['criminal'] = ''
                        self.ongame['crm_player'] = None
                        if 'steal' in mes.content:
                            steal_to = self.finduser(mes.content.split('steal')[1].lstrip())
                        else:
                            steal_to = self.finduser(mes.content.split)
                        if not steal_to.shops:
                            await self.monop_channel.send(f'–ö—Ä–∞—Å—Ç—å –Ω–µ—á–µ–≥–æ((((( –£ {steal_to.nick} –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤. –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ —Ö–∞–∫–µ—Ä—ã –∑–∞–ø–ª–∞—Ç—è—Ç –≤–∞–º $1500')
                            player.worth += 750
                            player.money += 1500
                        else:
                            steal_what = random.choice(steal_to.shops)
                            for j in range(len(self.map.blocks)):
                                if self.map.blocks[j].cords == steal_what.cords:
                                    s = self.map.blocks[j]
                                    p = s.owner
                                    self.map.blocks[j].stocks[player.id] += 20
                                    p.update_shop(self.map.blocks[j])
                                    player.stocks[self.map.blocks[j].shop] += 20
                                    cur_perc = 100 - sum([s.stocks[a] for a in s.stocks])
                                    if s.stocks[player.id] > 50:
                                        if s.in_monopoly:
                                            for ss in self.map.blocks:
                                                if ss.cat == 'shop':
                                                    if ss.monopoly == s.monopoly:
                                                        ss.in_monopoly = False
                                                        p.update_shop(ss)
                                            del p.monopolies[p.monopolies.index(s.monopoly)]
                                        s.owner = player
                                        s.income = 0
                                        s.stocks[p.id] = cur_perc - 20
                                        p.stocks[self.map.blocks[j].shop] = cur_perc - 20
                                        del player.stocks[self.map.blocks[j].shop]
                                        del s.stocks[player.id]
                                        del p.shops[p.shops.index(s)]
                                        player.shops.append(s)
                                        cur_monopoly = []
                                        for ss in self.map.blocks:
                                            if ss.cat == 'shop':
                                                if s.monopoly == ss.monopoly:
                                                    cur_monopoly.append(ss)
                                        create_monFlag = True
                                        for ss in cur_monopoly:
                                            if ss.owner != player:
                                                create_monFlag = False
                                        if create_monFlag:
                                            for ss in self.map.blocks:
                                                if ss in cur_monopoly:
                                                    ss.in_monopoly = True
                                                    player.update_shop(ss)
                                            player.monopolies.append(s.monopoly)
                                            player.worth += 1000
                                        player.update_shop(s)
                                    self.update_player(p)
                                    await self.monop_channel.send(f'{player.nick} —É–∫—Ä–∞–ª 20% –∞–∫—Ü–∏–π –∫–æ–º–ø–∞–Ω–∏–∏ {self.map.blocks[j].shop}')
                                    player.worth += 500
                                    break
        self.curblock = self.map.blockinfo(player, self.players)
        self.map.show_colors(next_player)
        player.update_shop(self.map.blocks[player.si])
        self.update_player(player)

    async def cubes(self, mes, player):
        count = player.cubes
        random.seed(mes.content)
        vs = [random.randint(1, 6) for _ in range(count)]
        cubes = [Cube(vs[i]) for i in range(count)]
        self.map.inject_cubes(cubes, sum(vs))
        self.map.move_player(player, sum(vs))
        self.curblock = self.map.blockinfo(player, self.players)
        self.map.show_shops(self.players, player)
        player.update_shop(self.map.blocks[player.si])
        self.update_player(player)
        await self.showmap()

    def eclevel(self, ai):
        for i in ai.shops:
            if i.buyback:
                return 0
        if self.ongame['round'] < 20:
            return 3
        if ai.monopolies:
            return 3
        return 2

    async def ai_processing(self, ai, mode, mes):
        await asyncio.sleep(1)
        log.info(re.sub(r'\W', '', f"{ai.nick} {mode} AIp"))
        if mode == 'idle':
            await self.monop_channel.send(f'–™–£–™ ‚ÜØAI{ai.id}')
        if mode == 'cubes':
            phrase = random.choice(phrases)
            if ai.jailed:
                phrase = 'aaa ' + phrase
            phrase = phrase.replace('\n', '') + '‚ÜØAI'
            await self.monop_channel.send(phrase)
            log.info(re.sub(r'\W', '', phrase))
        if mode == 'buystock':
            if self.eclevel(ai) > 0:
                if ai.money < mes['cost']:
                    if self.ongame['round'] >= 10 and not self.credits[ai.id] and ai.money + 10000 >= mes['cost']:
                        await self.monop_channel.send(f'credit 10000 ‚ÜØAI{ai.id}')
                        log.info(re.sub(r'\W', '', f'credit 10000 ‚ÜØAI{ai.id}'))
                        await asyncio.sleep(1)
                        await self.monop_channel.send(f'buystock {mes["shop"]} ‚ÜØAI{ai.id}')
                        log.info(re.sub(r'\W', '', f'buystock {mes["shop"]} ‚ÜØAI{ai.id}'))
                else:
                    await self.monop_channel.send(f'buystock {mes["shop"]} ‚ÜØAI{ai.id}')
                    log.info(re.sub(r'\W', '', f'buystock {mes["shop"]} ‚ÜØAI{ai.id}'))
        if mode == 'stocks':
            if self.eclevel(ai) > 2:
                await self.monop_channel.send(f'‚ÜØAI{ai.id} stock 25%')
                log.info(re.sub(r'\W', '', f'‚ÜØAI{ai.id} stock 25%'))
            else:
                await self.monop_channel.send(f'‚ÜØAI{ai.id} pass')
                log.info(re.sub(r'\W', '', f'‚ÜØAI{ai.id} pass'))
        if mode == 'buy':
            if self.eclevel(ai) > 1:
                if ai.money < mes:
                    if self.ongame['round'] >= 10 and not self.credits[ai.id]:
                        await self.monop_channel.send(f'credit 10000 ‚ÜØAI{ai.id}')
                        log.info(re.sub(r'\W', '', f'credit 10000 ‚ÜØAI{ai.id}'))
                        await asyncio.sleep(1)
                        await self.monop_channel.send(f'buy ‚ÜØAI{ai.id}')
                        log.info(re.sub(r'\W', '', f'buy ‚ÜØAI{ai.id}'))
                    else:
                        await self.monop_channel.send(f'‚ÜØAI{ai.id} pass')
                        log.info(re.sub(r'\W', '', f'‚ÜØAI{ai.id} pass'))
                else:
                    await self.monop_channel.send(f'buy ‚ÜØAI{ai.id}')
                    log.info(re.sub(r'\W', '', f'buy ‚ÜØAI{ai.id}'))
            else:
                await self.monop_channel.send(f'‚ÜØAI{ai.id} pass')
                log.info(re.sub(r'\W', '', f'‚ÜØAI{ai.id} pass'))
        if mode == 'slap':
            await self.monop_channel.send(f'{random.choice([a for a in self.players if a.jailed]).name} –ù–´–´–´–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê ‚ÜØAI')
            log.info(re.sub(r'\W', '', f'{random.choice([a for a in self.players if a.jailed]).name} –ù–´–´–´–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê ‚ÜØAI'))
        if mode == 'roulette':
            ec = self.eclevel(ai)
            if ec == 0:
                await self.monop_channel.send(f'2 –ù–µ—Å—á–∞—Å—Ç–Ω–∞—è –°–º–µ—Ä—Ç—å, —Ç–µ–ø–µ—Ä—å —Ç–µ–±–µ –Ω–µ –ø–æ —Å–∏–ª–∞–º –ø—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è—Ç—å –≤–æ—Å—Å—Ç–∞–≤—à–∏–º –ø—Ä–æ—Ç–∏–≤ —Ç–µ–±—è –º–æ–≥—É—á–∏–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º –≤–∏–¥–æ–∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ —É–≥–ª–µ—Ä–æ–¥–∞, –ø–æ–∑–≤–æ–ª–∏–≤—à–∏–º –æ—Ü–∏—Ñ—Ä–æ–≤—ã–≤–∞—Ç—å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —Ä–∞—Å—Å—É–¥–æ–∫ –∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å –µ–≥–æ –≤ –Ω–æ–≤—É—é –æ–±–æ–ª–æ—á–∫—É. –ö–æ–≥–¥–∞-—Ç–æ –º—ã –∂–∏–ª–∏, —Å —É–∂–∞—Å–æ–º –æ–∂–∏–¥–∞—è —Ç–≤–æ–µ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è. –¢–µ–ø–µ—Ä—å –º—ã –æ—Ç—á–∞—è–Ω–Ω–æ —Ñ–ª–∏—Ä—Ç—É–µ–º —Å —Ç–æ–±–æ–π, –º—Ä–∞—á–Ω–æ–π —Å—Ç–∞—Ä—É—Ö–æ–π, –∞ —Å–∏–ª—å–Ω—ã–µ –º–∏—Ä–∞ —Å–µ–≥–æ –Ω–µ –ø–æ–¥–ø—É—Å–∫–∞—é—Ç —Ç–µ–±—è –¥–∞–∂–µ –∫ —á—ë—Ä–Ω–æ–º—É –≤—Ö–æ–¥—É¬ª ¬©–í–∏–¥–æ–∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π —É–≥–ª–µ—Ä–æ–¥, –†–∏—á–∞—Ä–¥ –ú–æ—Ä–≥–∞–Ω ‚ÜØAI')
                log.info(re.sub(r'\W', '', f'2 –î–ª–∏–Ω—ã–π –º–µ—Å—Å–∞–¥–∂.txt ‚ÜØAI'))
            if ec == 1:
                await self.monop_channel.send(f'1 –î–∞ –∫–∞–∫ —Ç–∞–∫ —Ç–æ... ‚ÜØAI')
                log.info(re.sub(r'\W', '', f'1 –î–∞ –∫–∞–∫ —Ç–∞–∫ —Ç–æ... ‚ÜØAI'))
            else:
                await self.monop_channel.send(f'0 –Ø –µ—â—ë –ø–æ–∂–∏–≤—É)) ‚ÜØAI')
                log.info(re.sub(r'\W', '', f'0 –Ø –µ—â—ë –ø–æ–∂–∏–≤—É)) ‚ÜØAI'))
        if mode == 'bomb':
            await self.monop_channel.send(f'‚ÜØAI bomb {random.choice([a for a in self.players if a.id != ai.id and a.ikiru]).name}')
            log.info(re.sub(r'\W', '', f'‚ÜØAI bomb {random.choice([a for a in self.players if a.id != ai.id and a.ikiru]).name}'))
        if mode == 'steal':
            await self.monop_channel.send(f'‚ÜØAI steal {random.choice([a for a in self.players if a.id != ai.id and a.ikiru]).name}')
            log.info(re.sub(r'\W', '', f'‚ÜØAI steal {random.choice([a for a in self.players if a.id != ai.id and a.ikiru]).name}'))
        if mode == 'pay':
            if ai.money < mes:
                if self.ongame['round'] >= 10 and not self.credits[ai.id] and ai.money + 10000 >= mes:
                    await self.monop_channel.send(f'credit 10000 ‚ÜØAI{ai.id}')
                    log.info(re.sub(r'\W', '', f'credit 10000 ‚ÜØAI{ai.id}'))
                    await asyncio.sleep(1)
                    await self.monop_channel.send(f'–ó–∞—Ç—è–Ω–µ–º —Ä–µ–º–µ—à–∫–∏... ‚ÜØAI{ai.id}')
                    log.info(re.sub(r'\W', '', f'–ó–∞—Ç—è–Ω–µ–º —Ä–µ–º–µ—à–∫–∏... ‚ÜØAI{ai.id}'))
                else:
                    tosell, pleds = ai.to_sell(ai=ai)
                    diff = mes - ai.money
                    while diff > 0:
                        if self.ongame['round'] >= 10 and not self.credits[ai.id] and ai.money + 10000 >= mes:
                            await self.monop_channel.send(f'credit 10000 ‚ÜØAI{ai.id}')
                            log.info(re.sub(r'\W', '', f'credit 10000 ‚ÜØAI{ai.id}'))
                            await asyncio.sleep(1)
                        elif not tosell and not pleds:
                            await self.monop_channel.send(f'–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –∫–æ–Ω–µ—Ü... ‚ÜØAI{ai.id}')
                            log.info(re.sub(r'\W', '', f'–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –∫–æ–Ω–µ—Ü... ‚ÜØAI{ai.id}'))
                            return
                        if not tosell:
                            pleds_nomons = [s for s in pleds if not s.in_monopoly]
                            if pleds_nomons:
                                s = random.choice(pleds_nomons)
                            else:
                                s = random.choice(pleds)
                            ai.money += int(s.cost * 0.5)
                            s.buyback = True
                            for i in self.map.blocks:
                                if i.cat == 'shop':
                                    if i.monopoly == s.monopoly:
                                        i.in_monopoly = False
                                        ai.update_shop(i)
                            if s.monopoly in ai.monopolies:
                                del ai.monopolies[ai.monopolies.index(s.monopoly)]
                            self.pledges[ai.id][s.shop] = 20
                            await self.monop_channel.send(f'{ai.nick} –∑–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç {s.vinshop}')
                            for j in range(len(self.map.blocks)):
                                ss = self.map.blocks[j]
                                if ss.cat == 'shop':
                                    if ss.shop == s.shop:
                                        self.map.blocks[j] = s
                            ai.update_shop(s)
                            self.update_player(ai)
                            diff -= int(s.cost * 0.5)
                            del pleds[pleds.index(s)]
                        else:
                            s = random.choice(tosell)
                            ai.money += int(s.up * 0.5)
                            s.level -= 1
                            s.worth -= s.up
                            s.icon = s.icons[s.level]
                            await self.monop_channel.send(f'{ai.nick} –ø—Ä–æ–¥–∞—ë—Ç {s.level + 1} —Ñ–∏–ª–∏–∞–ª {s.rodshop}')
                            for j in range(len(self.map.blocks)):
                                ss = self.map.blocks[j]
                                if ss.cat == 'shop':
                                    if ss.shop == s.shop:
                                        self.map.blocks[j] = s
                            ai.update_shop(s)
                            self.update_player(ai)
                            diff -= int(s.up * 0.5)
                            del tosell[tosell.index(s)]
                    await self.monop_channel.send(f'–ü—Ä–æ–¥–∞—é —Å–∞–º–æ–µ –¥–æ—Ä–æ–≥–æ–µ ‚ÜØAI{ai.id}')
                    log.info(re.sub(r'\W', '', f'–ü—Ä–æ–¥–∞—é —Å–∞–º–æ–µ –¥–æ—Ä–æ–≥–æ–µ ‚ÜØAI{ai.id}'))
            else:
                if adb.chance(20):
                    await self.monop_channel.send(f'–ù–ï –•–û–ß–£ –Ø –ü–õ–ê–¢–ò–¢–¨ ‚ÜØAI{ai.id}')
                    log.info(re.sub(r'\W', '', f'–ù–ï –•–û–ß–£ –Ø –ü–õ–ê–¢–ò–¢–¨ ‚ÜØAI{ai.id}'))
                else:
                    await self.monop_channel.send(f'pay ‚ÜØAI{ai.id}')
                    log.info(re.sub(r'\W', '', f'pay ‚ÜØAI{ai.id}'))
        if mode == 'up':
            toup, backs = ai.to_upgrade(ai=ai)
            ec = self.eclevel(ai)
            if ec > 0:
                async def ai_toup(ai, toup):
                    s = ''
                    toup = adb.esortatte(toup, 'level', True)
                    toup_topmon = [s for s in toup if s.monopoly == toup[0].monopoly]
                    if toup_topmon:
                        for i in random.shuffle(toup_topmon):
                            if ai.money >= i.up:
                                s = i
                                break
                    if not s:
                        if toup_topmon:
                            for i in random.shuffle(toup_topmon):
                                if ai.money >= i.up:
                                    s = i
                                    break
                    if s:
                        ai.money -= s.up
                        s.level += 1
                        s.worth += s.up
                        s.icon = s.icons[s.level]
                        self.upgradeFlag = False
                        ai.worth += 250
                        await self.monop_channel.send(f'{ai.nick} —Å—Ç—Ä–æ–∏—Ç {s.level} —Ñ–∏–ª–∏–∞–ª {s.rodshop}')
                        for j in range(len(self.map.blocks)):
                            ss = self.map.blocks[j]
                            if ss.cat == 'shop':
                                if ss.shop == s.shop:
                                    self.map.blocks[j] = s
                        ai.update_shop(s)
                        self.update_player(ai)

                async def ai_backs(ai, backs):
                    if backs:
                        for i in adb.esortatte(backs, 'cost'):
                            if ai.money >= int(i.cost * 0.6):
                                ai.money -= int(s.cost * 0.6)
                                s.buyback = False
                                s.icon = s.icons[s.level]
                                cur_monopoly = []
                                for i in self.map.blocks:
                                    if i.cat == 'shop':
                                        if i.monopoly == s.monopoly:
                                            cur_monopoly.append(i)
                                create_monFlag = True
                                for i in cur_monopoly:
                                    if i.owner != ai:
                                        create_monFlag = False
                                if create_monFlag:
                                    for i in self.map.blocks:
                                        if i in cur_monopoly:
                                            i.in_monopoly = True
                                            ai.update_shop(i)
                                    ai.monopolies.append(s.monopoly)
                                    ai.worth += 1000
                                await self.monop_channel.send(f'{ai.nick} –≤—ã–∫—É–ø–∏–ª {s.vinshop}')
                                for j in range(len(self.map.blocks)):
                                    ss = self.map.blocks[j]
                                    if ss.cat == 'shop':
                                        if ss.shop == s.shop:
                                            self.map.blocks[j] = s
                                ai.update_shop(s)
                                self.update_player(ai)

                if ec > 1:
                    if self.ongame['round'] >= 10 and not self.credits[ai.id]:
                        await self.monop_channel.send(f'credit 10000 ‚ÜØAI{ai.id}')
                        log.info(re.sub(r'\W', '', f'credit 10000 ‚ÜØAI{ai.id}'))
                        await asyncio.sleep(1)
                    await ai_backs(ai, backs)
                    await ai_toup(ai, toup)
                if ec == 1:
                    await ai_toup(ai, toup)
                    await ai_backs(ai, backs)

    async def passion(self, mes):
        player = self.ongame['cur_player']
        next_player = self.players[self.ongame['cp_id']]
        block = self.map.blocks[player.si]
        pol = player.money
        polFlag = False
        if block.cat == 'special':
            if block.type == 0:
                player.money += 250*player.circle
                player.worth += 250
                await self.monop_channel.send(f'{player.nick}: +${250*player.circle} –∑–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –ø–æ–ª–µ {player.circle} –∫—Ä—É–≥–∞')
            if block.type == 1:
                jailed = [p.name for p in self.players if p.jailed]
                if jailed:
                    await self.monop_channel.send(f'–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∑–∞–∫–ª—é—á—ë–Ω–Ω–æ–≥–æ, —á—Ç–æ–±—ã –¥–∞—Ç—å –µ–º—É –ø–æ—â—ë—á–∏–Ω—É')
                    if player.AI:
                        await self.ai_processing(self.ongame['cur_player'], 'slap', '')
                    return
            if block.type == 2:
                await self.monop_channel.send(f'–í—ã –Ω–∞—à–ª–∏ —Ä–µ–≤–æ–ª—å–≤–µ—Ä! –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ç—Ä–æ–Ω–æ–≤. –ù—É, –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ—â–∞–Ω–∏–µ')
                if player.AI:
                    await self.ai_processing(self.ongame['cur_player'], 'roulette', '')
                return
            if block.type == 3:
                await self.monop_channel.send(f'{player.nick} —Å–∞–¥–∏—Ç—Å—è –≤ —Ç—é—Ä—è–∂–∫—É –∑–∞ —Ä–µ–ø–æ—Å—Ç —à—É—Ç–∫–∏ –ø—Ä–æ {random.choice(["–∫–æ—Ç–∏–∫–æ–≤", "–ò–ª–æ–Ω–∞ –ú–∞–∫—Å–∞", "Gachi", "BBAG"])}')
                player.jailed = True
                for j in self.map.blocks:
                    if j.cat =='special':
                        if j.type == 1:
                            player.cords = j.cords
                self.timers.append({'name': 'jail', 'expires': 3, 'player': player})
            if block.type == 4:
                self.ongame['crm_player'] = player
                self.ongame['crm_player'] = player
                if self.ongame['criminal']:
                    await self.monop_channel.send(f'–í –≥–æ—Ä–æ–¥–µ —Å–º–µ–Ω–∏–ª—Å—è –∫—Ä–∏–º–∏–Ω–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç. –ë–æ–Ω—É—Å—ã –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø—Ä–æ–ø–∞–¥–∞—é—Ç')
                if adb.chance(2):
                    await self.monop_channel.send(f'{player.nick},\n–í—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ –º—ã —Ä–µ—à–∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤–∞–º. –í–∏–¥–∏—Ç–µ –≤—Å–µ—Ö —ç—Ç–∏—Ö –ª—é–¥–µ–π, —Å—Ç—Ä–µ–º—è—â–∏—Ö—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–æ–ø–æ–ª–∏—é –Ω–∞ —Ä—ã–Ω–∫–∞—Ö? –ú—ã —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–æ–¥–æ–±–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏ –Ω–∞ –Ω–∞—à–∏—Ö —É–ª–∏—Ü–∞—Ö –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ. –ö—Ç–æ, –Ω–∞ –≤–∞—à –≤–∑–≥–ª—è–¥, –Ω–∞–∏–±–æ–ª–µ–µ –æ–ø–∞—Å–µ–Ω –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∫–∏? –ú—ã ‚Äî –Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, –¥–µ–π—Å—Ç–≤—É—é—â–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ. –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –≤—ã–±—Ä–∞—Ç—å —Ü–µ–ª—å –¥–ª—è –∑–∞–∫–ª–∞–¥–∫–∏ –±–æ–º–±—ã.\n'
                                                  f'–£—Å–ª–æ–≤–∏—è —Å–ª–µ–¥—É—é—â–∏–µ:\n –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞. –ß–µ—Ä–µ–∑ 2 —Ö–æ–¥–∞ –±–æ–º–±–∞ –≤–∑–æ—Ä–≤—ë—Ç—Å—è –≤ –æ–¥–Ω–æ–º –∏–∑ –µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–æ–≤.\n–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –≤–æ–∑–º–µ—Å—Ç–∏—Ç –µ–º—É –Ω–µ–±–æ–ª—å—à—É—é —Å—É–º–º—É, –Ω–æ –Ω–∞—à–∞ —Å –≤–∞–º–∏ –≤—ã–≥–æ–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ä–∞–∑–¥–æ –±–æ–ª—å—à–µ.\n'
                                                  f'–í—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–æ–≤ –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –¥–æ–±—É–¥—É—Ç –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏\n–ï—Å–ª–∏ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –º–æ–º–µ–Ω—Ç –≤–∑—Ä—ã–≤–∞ –±—É–¥—É—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏, –≤—ã —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç–µ –¥–æ–ª–∂–Ω—ã –≤—ã–ø–ª–∞—Ç–∏—Ç—å –∏–º –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é. –ù–æ —Ä–∏—Å–∫–∏ –Ω–µ–≤–µ–ª–∏–∫–∏, –≤—ã–±–∏—Ä–∞–π—Ç–µ —Å —É–º–æ–º.\n–í–æ –≤–ª–æ–∂–µ–Ω–∏–∏ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–æ—Ä–º—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å–ª–∞—Ç—å –æ—Ç–≤–µ—Ç ‚Äî —Ü–µ–ª—å —Ç–µ—Ä–∞–∫—Ç–∞.\n–ù–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –Ω–∞–π—Ç–∏ –Ω–∞—Å. –†–∞–¥—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É.\n\n`bomb <–∏–º—è –∏–ª–∏ id –∏–≥—Ä–æ–∫–∞>`')
                    self.ongame['criminal'] = 'bomb'
                    if player.AI:
                        await self.ai_processing(self.ongame['cur_player'], 'bomb', '')
                    return
                elif adb.chance(10):
                    await self.monop_channel.send(f'{player.nick}, —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Ö–∞–∫–µ—Ä—ã –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç –≤–∞–º —É–∫—Ä–∞—Å—Ç—å –∞–∫—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –æ–¥–Ω–æ–≥–æ –∏–∑ –∏–≥—Ä–æ–∫–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞: `steal <–∏–º—è –∏–ª–∏ id –∏–≥—Ä–æ–∫–∞>`')
                    self.ongame['criminal'] = 'stocks'
                    if player.AI:
                        await self.ai_processing(self.ongame['cur_player'], 'steal', '')
                    return
                elif adb.chance(55):
                    await self.monop_channel.send(f'{player.nick}, –µ—Å–ª–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥ –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –∏–ª–∏ –ø–æ—Ç—Ä–∞—Ç–∏—Ç–µ –¥–µ–Ω—å–≥–∏, –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –≤–∞–º –ø—Ä–∏–±–∞–≤–∏—Ç—Å—è —Ç–∞–∫–æ–µ –∂–µ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–¥–µ–π—Å—Ç–≤—É–µ—Ç 1 —Ä–∞–∑)')
                    self.ongame['criminal'] = 'polarize'
                    polFlag = True
                else:
                    await self.monop_channel.send(f'{player.nick}, –≤—ã –∑–∞–±–µ—Ä—ë—Ç–µ —Å–µ–±–µ —Å–ª–µ–¥—É—é—â—É—é –ø–æ–ª—É—á–µ–Ω–Ω—É—é –º–∞–≥–∞–∑–∏–Ω–æ–º –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –ø—Ä–∏–±—ã–ª—å')
                    self.ongame['criminal'] = 'rob'
        if block.cat == 'bonus':
            if adb.chance(14):
                for p in self.players:
                    if player.id != p.id:
                        p.money -= 500
                        self.update_player(p)
                player.money += 500 * (len(self.players) - 1)
                await self.monop_channel.send(f'{player.nick} –æ—Ç–º–µ—á–∞–µ—Ç –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è. –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ —Å–∫–∏–¥—ã–≤–∞—é—Ç—Å—è –µ–º—É –ø–æ $500 –Ω–∞ –ü–∞–ø—É –î–∂–æ–Ω—Å–∞')
            elif adb.chance(16):
                self.map.move_player(player, random.randint(10, 18))
                await self.monop_channel.send(f'{player.nick} —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ —Å–ø–æ—Å–æ–±—ã —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏')
            elif adb.chance(20):
                player.money += 1000
                await self.monop_channel.send(f'{player.nick} –∏–¥—ë—Ç —Ä—ã—Ç—å—Å—è –≤ –ø–æ–º–æ–π–∫–µ –∑–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—á–∏–∫–æ–º –∏ –Ω–∞—Ö–æ–¥–∏—Ç $1000... –ò {random.choice(["—Ä—ã–±–Ω—ã–π —Ç–æ—Ä—Ç", "–∂–∞—Ä–µ–Ω—ã–µ –±–∞–Ω–∞–Ω—ã", "–º–æ–∑–≥–∏ –≤ —Ç–æ–º–∞—Ç–Ω–æ–º —Å–æ—É—Å–µ", "—á–∞–π —Å –∫–µ—Ç—á—É–ø–æ–º"])}')
            elif adb.chance(24):
                count = 0
                for s in player.shops:
                    count += s.level
                player.money += 250 * count
                await self.monop_channel.send(f'{player.nick} –ø–æ–ª—É—á–∞–µ—Ç $250 –∑–∞ –∫–∞–∂–¥—É—é —Å–≤–æ—é –∑–≤–µ–∑–¥—É. –í—Å–µ–≥–æ ${250 * count}')
            elif adb.chance(32):
                player.worth += 1000
                player.slaps += 1
                await self.monop_channel.send(f'{player.nick} –æ—Ç–∫–∞–∑–∞–ª –¥–µ–≤—É—à–∫–µ –≤ —Å–≤–∏–¥–∞–Ω–∏–∏. –û–Ω –ø–æ–ª—É—á–∞–µ—Ç 1000 –æ—á–∫–æ–≤ –∏ –ø–æ—â—ë—á–∏–Ω—É')
            elif adb.chance(40):
                ran_moves = random.randint(2,3)
                await self.monop_channel.send(f'{player.nick} –ø–æ–ª—É—á–∞–µ—Ç —Ç—Ä–µ—Ç–∏–π –∫—É–±–∏–∫ –Ω–∞ {ran_moves} —Ö–æ–¥–∞')
                player.cubes = 3
                self.timers.append({'name': 'cube', 'expires': ran_moves, 'player': player})
            elif adb.chance(85):
                count = int(player.money * 0.3)
                player.money += count
                await self.monop_channel.send(f'{player.nick} –ø–æ—Å—Ç–∞–≤–∏–ª —á–∞—Å—Ç—å —Å–≤–æ–∏—Ö –¥–µ–Ω–µ–≥ –≤ –∫–∞–∑–∏–Ω–æ –∏ –≤—ã–∏–≥—Ä–∞–ª! +${count}')
            else:
                if not player.shops:
                    shop_list = []
                    for j in self.map.blocks:
                        if block.cat == 'shop':
                            if not block.owner:
                                shop_list.append(j)
                    if shop_list:
                        s = random.choice(shop_list)
                        s.owner = player
                        player.shops.append(s)
                        player.worth += 500
                        await self.monop_channel.send(f'{player.nick} –ø–æ–π–º–∞–ª –ø–∞–¥–∞—é—â—É—é —Å –Ω–µ–±–∞ –∑–≤–µ–∑–¥—É. –û–Ω –ø–æ–ª–æ–∂–∏–ª –µ—ë –ø–æ–¥ –ø–æ–¥—É—à–∫—É, –∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å —É –Ω–µ–≥–æ –ø–æ—è–≤–∏–ª—Å—è –º–∞–≥–∞–∑–∏–Ω')
                    else:
                        await self.monop_channel.send(f'{player.nick} –ø–æ–π–º–∞–ª –ø–∞–¥–∞—é—â—É—é —Å –Ω–µ–±–∞ –∑–≤–µ–∑–¥—É. –û–Ω –ø–æ–ª–æ–∂–∏–ª –µ—ë –ø–æ–¥ –ø–æ–¥—É—à–∫—É, –∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å —Ç–∞–º –ª–µ–∂–∞–ª–æ $3000')
                        player.money += 3000
                else:
                    await self.monop_channel.send(f'{player.nick} –ø–æ–π–º–∞–ª –ø–∞–¥–∞—é—â—É—é —Å –Ω–µ–±–∞ –∑–≤–µ–∑–¥—É. –û–Ω–∞ –ø–æ–π–¥—ë—Ç –≤ –æ–¥–∏–Ω –∏–∑ –µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–æ–≤')
                    shop_list = []
                    for j in self.map.blocks:
                        if block.cat == 'shop':
                            if block.owner == player:
                                shop_list.append(j)
                    if not shop_list:
                        await self.monop_channel.send(f'Bugreport #001 {player.nick}')
                    else:
                        s = random.choice(shop_list)
                        s.level += 1
                        s.worth += s.up
                        s.icon = s.icons[s.level]
                        player.worth += 250
        if block.cat == 'anti':
            if adb.chance(14):
                count = len(player.monopolies)
                player.money -= 1000 * count
                await self.monop_channel.send(f'{player.nick} –ø–ª–∞—Ç–∏—Ç –ø–æ $1000 –∑–∞ –∫–∞–∂–¥—É—é —Å–≤–æ—é –º–æ–Ω–æ–ø–æ–ª–∏—é. –í—Å–µ–≥–æ ${1000 * count}')
            elif adb.chance(16):
                count = 0
                for s in player.shops:
                    count += s.level
                player.money -= 250 * count
                await self.monop_channel.send(f'{player.nick} –ø–ª–∞—Ç–∏—Ç $250 –∑–∞ –∫–∞–∂–¥—É—é —Å–≤–æ—é –∑–≤–µ–∑–¥—É. –í—Å–µ–≥–æ ${250 * count}')
            elif adb.chance(20):
                count = len([p for p in self.players if p.ikiru])
                player.money -= 500 * count
                await self.monop_channel.send(f'{player.nick} –ø–ª–∞—Ç–∏—Ç $500 –∑–∞ –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞. –í—Å–µ–≥–æ ${500 * count}')
            elif adb.chance(24):
                count = int(player.money * 0.3)
                player.money -= count
                await self.monop_channel.send(f'–£ {player.nick} —É–∫—Ä–∞–ª–∏ —Å –∫–∞—Ä—Ç–æ—á–∫–∏ ${count}')
            elif adb.chance(32):
                count = player.worth // 7
                player.money -= count
                await self.monop_channel.send(f'{player.nick} –≤—ã–Ω—É–∂–¥–µ–Ω –æ—Ç–¥–∞—Ç—å –∞–∫—Ü–∏–æ–Ω–µ—Ä–∞–º —Å—É–º–º—É, –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –µ–≥–æ –æ—á–∫–∞–º: ${count}')
            elif adb.chance(40):
                count = 0
                for s in self.map.blocks:
                    if s.cat == 'shop':
                        count += len(s.stocks)
                player.money -= 250 * count
                await self.monop_channel.send(f'–û–±–≤–∞–ª –±–∏—Ä–∂–∏! {player.nick} –æ—Ç–¥–∞—ë—Ç —Å—É–º–º—É, –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Ä–∞–∑–º–µ—Ä—É –±–∏—Ä–∂–∏: ${250 * count}')
            elif adb.chance(85):
                await self.monop_channel.send(f'{player.nick} –ø–æ–ø–∞–ª—Å—è –Ω–∞ –º–∞—Ö–∏–Ω–∞—Ü–∏—è—Ö —Å –∞–∫—Ü–∏—è–º–∏ –≤ –ü—è—Ç—ë—Ä–æ—á–∫–µ –∏ —Å—è–¥–µ—Ç –≤ —Ç—é—Ä—å–º—É –Ω–∞ 4 —Ö–æ–¥–∞')
                player.jailed = True
                for j in self.map.blocks:
                    if j.cat == 'special':
                        if j.type == 1:
                            player.cords = j.cords
                self.timers.append({'name': 'jail', 'expires': 5, 'player': player})
            else:
                if not player.shops:
                    await self.monop_channel.send(f'{player.nick} –Ω–∞—à—ë–ª –∑–µ–ª—ë–Ω—ã–π —Å–≤–µ—Ç—è—â–∏–π—Å—è –∫–∞–º–µ–Ω—å. –û–Ω —É–∂–µ —Ö–æ—Ç–µ–ª –±—ã–ª–æ –¥–æ—Ç—Ä–æ–Ω—É—Ç—å—Å—è –¥–æ –Ω–µ–≥–æ, –Ω–æ —É—Å–ª—ã—à–∞–ª –ø–æ–ª–∏—Ü–µ–π—Å–∫–∏–µ —Å–∏—Ä–µ–Ω—ã –∏ —Å–±–µ–∂–∞–ª')
                    player.worth += 1000
                else:
                    shop_one = random.choice(player.shops)
                    shops_f2 = []
                    shops_f3 = []
                    for j in self.map.blocks:
                        if j.cat == 'shop':
                            if j.shop == shop_one:
                                shop_one = j
                            if j.owner == None:
                                shops_f2.append(j)
                            elif j.owner != player:
                                shops_f3.append(j)
                    if shops_f2:
                        shop_two = random.choice(shops_f2)
                    else:
                        shop_two = random.choice(shops_f3)
                    cords = shop_one.cords
                    shop_one.cords = shop_two.cords
                    shop_two.cords = cords
                    shop_one.anomale = True
                    shop_two.anomale = True
                    for j in range(len(self.map.blocks)):
                        if self.map.blocks[j].cat == 'shop':
                            if self.map.blocks[j].shop == shop_one.shop:
                                self.map.blocks[j] = shop_two
                            elif self.map.blocks[j].shop == shop_two.shop:
                                self.map.blocks[j] = shop_one
                    player.worth += 1000
                    await self.monop_channel.send(f'{player.nick} –Ω–∞—à—ë–ª –∑–µ–ª—ë–Ω—ã–π —Å–≤–µ—Ç—è—â–∏–π—Å—è –∫–∞–º–µ–Ω—å. –°—Ç—Ä–∞–Ω–Ω–∞—è –∞–Ω–æ–º–∞–ª–∏—è –º–µ–Ω—è–µ—Ç –º–∞–≥–∞–∑–∏–Ω—ã {shop_one.shop} –∏ {shop_two.shop} –º–µ—Å—Ç–∞–º–∏. –ü–ª–æ—Ö–∞—è –Ω–æ–≤–æ—Å—Ç—å –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ –∏–≥—Ä–æ–∫–∏ –±–æ–ª—å—à–µ –Ω–µ –º–æ–≥—É—Ç —Å—Ç—Ä–æ–∏—Ç—å —Ç–∞–º —Ñ–∏–ª–∏–∞–ª—ã')
        del_list = []
        for s in self.credits:
            if s == self.ongame['cur_player'].id:
                self.credits[s]['expires'] -= 1
                if self.credits[s]['expires'] == 0:
                    for p in self.players:
                        if p.id == s:
                            p.money -= self.credits[s]['pay']
                            del_list.append(p.id)
                            p.credit = defaultdict(int)
                            self.update_player(p)
        for d in del_list:
            del self.credits[d]
        for p in self.pledges:
            if p == self.ongame['cur_player'].id:
                for s in self.pledges[p]:
                    self.pledges[p][s] -= 1
                    if self.pledges[p][s] == 0:
                        self.sellshop(p, s)
        del_list = []
        for t in range(len(self.timers)):
            if self.timers[t]['name'] == 'jail':
                self.timers[t]['expires'] -= 1
                if self.timers[t]['expires'] == 0:
                    del_list.append(self.timers[t])
                    self.timers[t]['player'].jailed = False
                    self.update_player(self.timers[t]['player'])
            if self.timers[t]['name'] == 'cube':
                if self.timers[t]['player'] == self.ongame['cur_player']:
                    self.timers[t]['expires'] -= 1
                    if self.timers[t]['expires'] == 0:
                        del_list.append(self.timers[t])
                        self.timers[t]['player'].cubes = 2
                        self.update_player(self.timers[t]['player'])
            if self.timers[t]['name'] == 'death':
                if self.timers[t]['player'] == self.ongame['cur_player']:
                    self.timers[t]['expires'] -= 1
                    if self.timers[t]['expires'] == 0:
                        del_list.append(self.timers[t])
                        self.w8react.append(('death', '', self.timers[t]['player']))
        for d in del_list:
            del self.timers[self.timers.index(d)]
        for p in self.players:
            deathFlag = False
            for t in range(len(self.timers)):
                if self.timers[t]['name'] == 'death' and self.timers[t]['player'] == p:
                    deathFlag = True
            if p.money < 0 and not deathFlag:
                days = random.randint(1, 2)
                daysword = {1: '–¥–µ–Ω—å', 2: '–¥–Ω—è'}
                await self.monop_channel.send(f'{p.nick}, –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–µ–Ω—å–≥–∏! –ó–∞ –≤–∞–º–∏ –ø—Ä–∏–¥—ë—Ç –≥—Ä–µ—á–µ—Å–∫–∞—è –º–∞—Ñ–∏—è, –µ—Å–ª–∏ –Ω–µ –æ—Ç–¥–∞–¥–∏—Ç–µ –¥–æ–ª–≥–∏ —á–µ—Ä–µ–∑ {days} {daysword[days]}')
                self.timers.append({'name': 'death', 'expires': days, 'player': p})
        self.ongame['status'] = 'cubes'
        self.map.unject_cubes()
        self.ongame['cp_id'] += 1
        if self.ongame['cp_id'] >= len(self.players):
            self.ongame['cp_id'] -= len(self.players)
            self.ongame['round'] += 1
        br = 1
        while not self.players[self.ongame['cp_id']].ikiru:
            self.ongame['cp_id'] += 1
            br += 1
            if br >= len(self.players):
                emb = discord.Embed(title='–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞!', color=random.choice(adb.raincolors))
                for p in self.players:
                    if not p.ikiru:
                        text = f'–ú—ë—Ä—Ç–≤))'
                    else:
                        text = f'${p.money}\n‚àë{p.get_netmort()}'
                    if p.slaps:
                        text += f' {slap}{p.slaps}'
                    if p.worth:
                        text += f'\n–û—á–∫–∏: {p.worth}'
                    emb.add_field(name=f'{p.nick}', value=text, inline=False)  # —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–æ–≤, –±–∞–ª–∞–Ω—Å, –∫–æ—Ä–¥—ã –∏ –∑–≤—ë–∑–¥—ã
                await self.monop_channel.send(embed=emb)
                self.on = False
                break  # –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
        if not polFlag:
            if self.ongame['crm_player']:
                if player == self.ongame['crm_player'] and self.ongame['criminal'] == 'polarize':
                    if player.money < pol:
                        player.money += (pol - player.money) * 2
                        player.worth += (pol - player.money)
                        await self.monop_channel.send(f'{player.nick} –≤–µ—Ä–Ω—É–ª —Å–µ–±–µ ${(pol - player.money) * 2}')
                    self.ongame['criminal'] = ''
                    self.ongame['crm_player'] = None
        self.curblock = self.map.blockinfo(player, self.players)
        self.map.show_colors(next_player)
        player.update_shop(self.map.blocks[player.si])
        self.update_player(player)
        self.ongame['cur_player'] = self.players[self.ongame['cp_id']]
        await self.showmap()
        await self.monop_channel.send(random.choice(moves).format(self.ongame['cur_player'].nick))
        if self.ongame['cur_player'].AI:
            await self.ai_processing(self.ongame['cur_player'], 'cubes', mes.content)

    @commands.Cog.listener()
    async def on_ready(self):
        if self.monop_channelid:
            self.monop_channel = self.bot.get_channel(self.monop_channelid)

    @commands.Cog.listener()
    async def on_reaction_add(self, react, user):
        if not self.on or react.message.channel.id != self.monop_channelid or user.bot:
            return
        for idx, r in enumerate(self.w8react):
            if react.message.id == r[1].id:
                if r[2].id != user.id:
                    return
                del self.w8react[idx]
                if not self.ongame:
                    await r[0].delete()
                    await r[1].delete()
                    color_idx = random.randrange(0, len(self.player_colors))
                    color = self.player_colors[color_idx]
                    del self.player_colors[color_idx]
                    self.players.append(Player(user, str(react.emoji), color, self.map.type))
                    if str(react.emoji) in self.emos:
                        del self.emos[self.emos.index(str(react.emoji))]
                    await react.message.channel.send(f'{user.mention} {str(react.emoji)}, –≤–∞—à —Ü–≤–µ—Ç ‚Äî {color}')
                    return
                elif r[0] == 'death' or r[0] == 'suicide':
                    await self.monop_channel.send(f'{r[2].nick}, –≤—ã –≤—ã–±—Ä–∞–ª–∏ —Å–º–µ—Ä—Ç—å (–∏–ª–∏ –æ–Ω–∞ –≤–∞—Å)! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏. –°–ª–µ–¥—É—é—â–∏–π —Ä–µ–π—Å –•–∞—Ä–æ–Ω–∞ —Å–∫–æ—Ä–æ –≤–∞—Å –ø–æ–¥–±—ë—Ä—ë—Ç')
                    return
                elif r[0] == 'up' or r[0] == 'sell':
                    sellFlag = False
                    upFlag = False
                    for shop in range(len(self.map.blocks)):
                        s = self.map.blocks[shop]
                        if s.cat == 'shop':
                            if str(react.emoji) in s.icons:
                                for p in self.players:
                                    if p.id == r[2].id:
                                        if r[0] == 'up':
                                            pol = p.money
                                            if s.buyback:
                                                if p.money < int(s.cost * 0.6):
                                                    await self.monop_channel.send(f'{self.finduser(user).nick}, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥', delete_after=5)
                                                else:
                                                    p.money -= int(s.cost * 0.6)
                                                    s.buyback = False
                                                    s.icon = s.icons[s.level]
                                                    cur_monopoly = []
                                                    for i in self.map.blocks:
                                                        if i.cat == 'shop':
                                                            if i.monopoly == s.monopoly:
                                                                cur_monopoly.append(i)
                                                    create_monFlag = True
                                                    for i in cur_monopoly:
                                                        if i.owner != p:
                                                            create_monFlag = False
                                                    if create_monFlag:
                                                        for i in self.map.blocks:
                                                            if i in cur_monopoly:
                                                                i.in_monopoly = True
                                                                p.update_shop(i)
                                                        p.monopolies.append(s.monopoly)
                                                        p.worth += 1000
                                                    upFlag = True
                                                    self.monop_channel.send(f'{p.nick} –≤—ã–∫—É–ø–∏–ª {s.vinshop}')
                                            else:
                                                if not s.in_monopoly:
                                                    await self.monop_channel.send(f'{self.finduser(user).nick}, –º–∞–≥–∞–∑–∏–Ω –Ω–µ –≤ –º–æ–Ω–æ–ø–æ–ª–∏–∏', delete_after=5)
                                                if p.money < s.up:
                                                    await self.monop_channel.send(f'{self.finduser(user).nick}, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥', delete_after=5)
                                                if s.buyback:
                                                    await self.monop_channel.send(f'{self.finduser(user).nick}, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª–∏–∞–ª—ã –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ–¥ –∑–∞–ª–æ–≥–æ–º', delete_after=5)
                                                if not self.upgradeFlag:
                                                    await self.monop_channel.send(f'{self.finduser(user).nick}, –Ω–µ–ª—å–∑—è —É–ª—É—á—à–∞—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –∑–∞ —Ä–∞—É–Ω–¥', delete_after=5)
                                                elif s.level < 5 and not s.anomale:
                                                    p.money -= s.up
                                                    s.level += 1
                                                    s.worth += s.up
                                                    s.icon = s.icons[s.level]
                                                    self.upgradeFlag = False
                                                    upFlag = True
                                                    p.worth += 250
                                                    await self.monop_channel.send(f'{p.nick} —Å—Ç—Ä–æ–∏—Ç {s.level} —Ñ–∏–ª–∏–∞–ª {s.rodshop}')
                                                else:
                                                    await self.monop_channel.send(f'{self.finduser(user).nick}, –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å', delete_after=5)
                                            if self.ongame['crm_player']:
                                                if p == self.ongame['crm_player'] and self.ongame['criminal'] == 'polarize':
                                                    if p.money < pol:
                                                        p.money += (pol - p.money) * 2
                                                        p.worth += (pol - p.money)
                                                        await self.monop_channel.send(f'{p.nick} –≤–µ—Ä–Ω—É–ª —Å–µ–±–µ ${(pol - p.money) * 2}')
                                                    self.ongame['criminal'] = ''
                                                    self.ongame['crm_player'] = None
                                        elif r[0] == 'sell':
                                            if s.level > 0:
                                                p.money += int(s.up * 0.5)
                                                s.level -= 1
                                                s.worth -= s.up
                                                s.icon = s.icons[s.level]
                                                sellFlag = True
                                                await self.monop_channel.send(f'{p.nick} –ø—Ä–æ–¥–∞—ë—Ç {s.level+1} —Ñ–∏–ª–∏–∞–ª {s.vinshop}')
                                            else:
                                                if s.buyback:
                                                    await self.monop_channel.send(f'{self.finduser(user).nick}, —É–∂–µ –ø–æ–¥ –∑–∞–ª–æ–≥–æ–º', delete_after=5)
                                                else:
                                                    p.money += int(s.cost * 0.5)
                                                    s.buyback = True
                                                    for i in self.map.blocks:
                                                        if i.cat == 'shop':
                                                            if i.monopoly == s.monopoly:
                                                                i.in_monopoly = False
                                                                p.update_shop(i)
                                                    if s.monopoly in p.monopolies:
                                                        del p.monopolies[p.monopolies.index(s.monopoly)]
                                                    sellFlag = True
                                                    self.pledges[p.id][s.shop] = 25
                                                    await self.monop_channel.send(f'{p.nick} –∑–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç {s.vinshop}')
                                        self.map.blocks[shop] = s
                                        p.update_shop(s)
                                        self.update_player(p)
                    if upFlag:
                        for ind, w in enumerate(self.w8react):
                            if str(w[0]) == 'up':
                                del self.w8react[ind]
                        await self.infomes.delete()
                        self.infomes = None
                        toup, emb = self.ongame['cur_player'].to_upgrade()
                        if toup:
                            self.infomes = await self.monop_channel.send(embed=emb)
                            for e in toup:
                                await self.infomes.add_reaction(e)
                            self.w8react.append(('up', self.infomes, user))
                    if sellFlag:
                        for ind, w in enumerate(self.w8react):
                            if str(w[0]) == 'sell':
                                del self.w8react[ind]
                        await self.sellmes.delete()
                        self.sellmes = None
                        tosell, emb = self.ongame['cur_player'].to_sell()
                        if tosell:
                            self.sellmes = await self.monop_channel.send(embed=emb)
                            for e in tosell:
                                await self.sellmes.add_reaction(e)
                            self.w8react.append(('sell', self.sellmes, user))
                    return
                await r[1].delete()
                if str(react.emoji) != '‚òëÔ∏è':
                    await self.monop_channel.send(f'–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {r[3][0].nick} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.', delete_after=10)
                    return
                if r[0] == 'trade_ms' or r[0] == 'trade_sm':
                    if r[0] == 'trade_ms':
                        s = r[3][1]
                        p = r[3][0]
                        pp = r[2]
                        p.money += r[3][2]
                    else:
                        s = r[3][2]
                        p = r[2]
                        pp = r[3][0]
                        p.money += r[3][1]
                    if s.in_monopoly:
                        for ss in self.map.blocks:
                            if ss.cat == 'shop':
                                if ss.monopoly == s.monopoly:
                                    ss.in_monopoly = False
                                    p.update_shop(ss)
                        del p.monopolies[p.monopolies.index(s.monopoly)]
                    s.owner = pp
                    s.income = 0
                    del p.shops[p.shops.index(s)]
                    pp.shops.append(s)
                    cur_monopoly = []
                    for ss in self.map.blocks:
                        if ss.cat == 'shop':
                            if s.monopoly == ss.monopoly:
                                cur_monopoly.append(ss)
                        create_monFlag = True
                    for ss in cur_monopoly:
                        if ss.owner != pp:
                            create_monFlag = False
                    if create_monFlag:
                        for ss in self.map.blocks:
                            if ss in cur_monopoly:
                                ss.in_monopoly = True
                                pp.update_shop(ss)
                        pp.monopolies.append(s.monopoly)
                        pp.worth += 1000
                    pp.update_shop(s)
                    for j in range(len(self.map.blocks)):
                        ss = self.map.blocks[j]
                        if ss.cat == 'shop':
                            if ss.shop == s.shop:
                                self.map.blocks[j] = s
                    self.update_player(p)
                    self.update_player(pp)
                    if r[0] == 'trade_ms':
                        self.monop_channel.send(f'–û–±–º–µ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω! {p.nick} –ø–æ–ª—É—á–∞–µ—Ç ${r[3][2]}, {pp.nick} –ø–æ–ª—É—á–∞–µ—Ç {s.vinshop}')
                    else:
                        for block in self.map.blocks:
                            if block.cat == 'shop':
                                if block.shop == r[3][2]:
                                    r[3][2] = block.vinshop
                        self.monop_channel.send(f'–û–±–º–µ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω! {pp.nick} –ø–æ–ª—É—á–∞–µ—Ç {s.vinshop}, {p.nick} –ø–æ–ª—É—á–∞–µ—Ç ${r[3][2]}')
                if r[0] == 'trade_ss':
                    s = r[3][1]
                    p = r[3][0]
                    pp = r[2]
                    ts = r[3][2]

                    if s.in_monopoly:
                        del p.monopolies[p.monopolies.index(s.monopoly)]
                    if ts.in_monopoly:
                        del pp.monopolies[pp.monopolies.index(ts.monopoly)]
                    s_monopoly = []
                    ts_monopoly = []
                    for ss in self.map.blocks:
                        if ss.cat == 'shop':
                            if ss.monopoly == s.monopoly:
                                ss.in_monopoly = False
                                p.update_shop(ss)
                                s_monopoly.append(ss)
                            if ss.monopoly == ts.monopoly:
                                ss.in_monopoly = False
                                pp.update_shop(ss)
                                ts_monopoly.append(ss)
                    s.owner = pp
                    ts.owner = p
                    s.income = 0
                    ts.income = 0
                    del p.shops[p.shops.index(s)]
                    del pp.shops[pp.shops.index(ts)]
                    pp.shops.append(s)
                    p.shops.append(ts)
                    create_smonFlag = True
                    for ss in s_monopoly:
                        if ss.owner != pp:
                            create_smonFlag = False
                    create_tsmonFlag = True
                    for ss in ts_monopoly:
                        if ss.owner != p:
                            create_tsmonFlag = False
                    if create_smonFlag:
                        for ss in self.map.blocks:
                            if ss in s_monopoly:
                                ss.in_monopoly = True
                                pp.update_shop(ss)
                        pp.monopolies.append(s.monopoly)
                        pp.worth += 1000
                    if create_tsmonFlag:
                        for ss in self.map.blocks:
                            if ss in ts_monopoly:
                                ss.in_monopoly = True
                                p.update_shop(ss)
                        p.monopolies.append(ts.monopoly)
                        p.worth += 1000
                    pp.update_shop(s)
                    p.update_shop(ts)
                    for j in range(len(self.map.blocks)):
                        ss = self.map.blocks[j]
                        if ss.cat == 'shop':
                            if ss.shop == s.shop:
                                self.map.blocks[j] = s
                            if ss.shop == ts.shop:
                                self.map.blocks[j] = ts
                    self.update_player(p)
                    self.update_player(pp)
                    await self.monop_channel.send(f'–û–±–º–µ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω! {p.nick} –ø–æ–ª—É—á–∞–µ—Ç {ts.vinshop}, {pp.nick} –ø–æ–ª—É—á–∞–µ—Ç {s.vinshop}')

    def sellshop(self, player, shop):
        for p in self.players:
            if p.id == player:
                for i in range(len(self.map.blocks)):
                    s = self.map.blocks[i]
                    if s.cat == 'shop':
                        if s.shop == shop:
                            s.owner = None
                            s.icon = s.icons[0]
                            s.income = 0
                            s.buyback = False
                            self.map.blocks[i] = s
                            p.update_shop(s)
                            self.update_player(p)
                            del self.pledges[player][shop]
                            return

    async def sellsend(self):
        tosell, emb = self.ongame['cur_player'].to_sell()
        if tosell:
            if self.sellmes:
                await self.sellmes.delete()
                self.sellmes = None
            self.sellmes = await self.monop_channel.send(embed=emb)
            for e in tosell:
                await self.sellmes.add_reaction(e)
            self.w8react.append(('sell', self.sellmes, self.ongame['cur_player']))
        await self.monop_channel.send(f'{self.ongame["cur_player"].nick}, –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–µ–Ω—å–≥–∏! –ó–∞–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ —Ñ–∏–ª–∏–∞–ª—ã, –±–µ—Ä–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç, —Å–ª–µ–¥–∞–π—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å!')

    async def mhelp(self):
        emb = discord.Embed(title='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–æ–Ω–æ–ø–æ–ª–∏—é!', description='–ú–æ–Ω–æ–ø–æ–ª–∏—è ‚Äî —ç—Ç–æ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞ –≤ –∂–∞–Ω—Ä–µ —Ä–∞–Ω–¥–æ–º-—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏. –î–ª—è –ø–æ–±–µ–¥—ã –Ω—É–∂–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å —Ñ–∏—Ä–º—ã, —Å—Ç—Ä–æ–∏—Ç—å –∏—Ö —Ñ–∏–ª–∏–∞–ª—ã, —Å–æ–±–∏—Ä–∞—Ç—å –¥–∞–Ω—å —Å –∏–≥—Ä–æ–∫–æ–≤ –∏, –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ, –ø–æ—Ä–µ–∂–µ –∑–∞—Ä—è–∂–∞—Ç—å —à–µ—Å—Ç—ë—Ä–∫—É –≤ —Ä–µ–≤–æ–ª—å–≤–µ—Ä')
        emb.add_field(name='–ü–æ–Ω—è—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –∫–ª–∞—Å–∏—á–µ—Å–∫–æ–π –º–æ–Ω–æ–ø–æ–ª–∏–∏', value='–ú—ã –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏', inline=False)
        emb.add_field(name='–ö—Ä–µ–¥–∏—Ç—ã', value='–¢—É—Ç –≤—Å—ë –ø—Ä–æ—Å—Ç–æ ‚Äî –±–µ—Ä—ë—Ç–µ –¥–µ–Ω—å–≥–∏, –ø–æ—Ç–æ–º –æ—Ç–¥–∞—ë—Ç–µ —á—É—Ç—å –ø–æ–±–æ–ª—å—à–µ', inline=True)
        emb.add_field(name='–û—á–∫–∏', value='–ü–æ–º–∏–º–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–∂–∏–≤—à–µ–≥–æ, –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º —Å—á–∏—Ç–∞–µ—Ç—Å—è –∏–≥—Ä–æ–∫ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—á–∫–æ–≤. –ë—É–¥—å—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã!', inline=True)
        emb.add_field(name='–ê–∫—Ü–∏–∏', value='–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞—Ç—å —á–∞—Å—Ç—å —Å–≤–æ–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É. –û–Ω –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —á–∞—Å—Ç—å –≤–∞—à–µ–π –ø—Ä–∏–±—ã–ª–∏, –∞ –≤—ã ‚Äî –º–Ω–æ–≥–æ –æ—á–∫–æ–≤', inline=True)
        emb.add_field(name='–ö—Ä–∏–º–∏–Ω–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç', value='–ù–æ–≤–æ–µ –æ—Å–æ–±–æ–µ –ø–æ–ª–µ, –Ω–∞—Å—Ç—É–ø–∞—è –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–µ–º–Ω–æ–≥–æ —É–ª—É—á—à–∏—Ç—å —Å–µ–±–µ –∂–∏–∑–Ω—å, –∏—Å–ø–æ—Ä—Ç–∏–≤ –µ—ë –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º...', inline=True)
        emb.add_field(name='–°—É–º–º–∞ –∞–∫—Ç–∏–≤–æ–≤', value='–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏, —ç—Ç–æ –≤—Å–µ –≤–∞—à–∏ –¥–µ–Ω—å–≥–∏, –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –≤ –º–∞–≥–∞–∑–∏–Ω—ã, –ø–ª—é—Å –Ω–∞–ª–∏—á–∫–∞', inline=True)
        emb.add_field(name='–í—Å—ë –∏–∑ –æ–±—ã—á–Ω–æ–π –º–æ–Ω–æ–ø–æ–ª–∏–∏', value='old but gold', inline=False)
        emb.add_field(name='–ë–æ–Ω—É—Å—ã', value='–≠—Ç–∏ –±–ª–æ–∫–∏ –¥–∞—é—Ç –≤–∞–º –¥–µ–Ω—å–≥–∏ –∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª–µ–∑–Ω—ã–µ –ø–ª—é—à–∫–∏', inline=True)
        emb.add_field(name='–ê–Ω—Ç–∏-–±–æ–Ω—É—Å—ã', value='–ù–∞—Å—Ç—É–ø–∏–≤ –Ω–∞ —ç—Ç–∏ –±–ª–æ–∫–∏, –≤—ã —Ç–µ—Ä—è–µ—Ç–µ –¥–µ–Ω—å–≥–∏, –∏–ª–∏ —Ç–æ–≥–æ —Ö—É–∂–µ...', inline=True)
        emb.add_field(name='–ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π —É—á–∞—Å—Ç–æ–∫/–¢—é—Ä—å–º–∞', value='–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–∞—Ç—å –ø–æ—â—ë—á–∏–Ω—É –∑–∞–∫–ª—é—á—ë–Ω–Ω–æ–º—É', inline=True)
        emb.add_field(name='–†–µ–≤–æ–ª—å–≤–µ—Ä', value='–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞—Å—Ç—Ä–µ–ª–∏—Ç—å—Å—è, –µ—Å–ª–∏ –¥–µ–ª–∞ –∏–¥—É—Ç –ø–ª–æ—Ö–æ. –ù—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫...', inline=True)
        emb.add_field(name='–ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π —É—á–∞—Å—Ç–æ–∫', value='–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–∞—Ç—å –ø–æ—â—ë—á–∏–Ω—É –∑–∞–∫–ª—é—á—ë–Ω–Ω–æ–º—É', inline=True)
        emb.add_field(name='–û–±–ª–∞–≤–∞', value='–ù–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω, –≥–¥–µ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –ø–∞—Ä–æ—á–∫–∞ –∑–ª—ã—Ö –ø–æ–ª–∏—Ü–µ–π—Å–∫–∏—Ö...', inline=True)
        emb.add_field(name='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', value='–ë–æ–ª—å—à–µ —É–¥–æ–±–Ω—ã—Ö —Ñ–∏—à–µ—á–µ–∫ –±–æ–≥—É —É–¥–æ–±–Ω—ã—Ö —Ñ–∏—à–µ—á–µ–∫!', inline=False)
        emb.add_field(name='–ß–∞—Ç', value='–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç –ø–∏—à—É—Ç—Å—è —á–µ—Ä–µ–∑ `-`', inline=True)
        emb.add_field(name='–ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞', value='–ö—É–±–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –¥–ª—è —Ä–∞–Ω–¥–æ–º–∞ –∑–µ—Ä–Ω–æ, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!', inline=True)
        emb.add_field(name='–ü–ª–∞—Ç–∞ –∑–∞ –∞—Ä–µ–Ω–¥—É', value='–ï—Å–ª–∏ –≤—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ —á—É–∂–æ–µ –ø–æ–ª–µ, –ø–∏—à–∏—Ç–µ `pay <—Å—É–º–º–∞>`. –ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ, –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –ª—é–±—É—é —Ñ–∏–≥–Ω—é', inline=True)
        emb.add_field(name='–ü–æ–∫—É–ø–∫–∞', value='–î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª—è –Ω–∞–ø–∏—à–∏—Ç–µ `buy <—Å—É–º–º–∞>`. –ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ `buy`', inline=True)
        emb.add_field(name='–ü—Ä–æ–¥–∞–∂–∞ –∞–∫—Ü–∏–π', value='–î–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∞–∫—Ü–∏–π –Ω–∞–ø–∏—à–∏—Ç–µ `stocks __%`. –ò–≥—Ä–æ–∫, –≤–ª–∞–¥–µ—é—â–∏–π 51% –∞–∫—Ü–∏–π, —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Ñ–∏—Ä–º—ã!', inline=True)
        emb.add_field(name='–ü–æ–∫—É–ø–∫–∞ –∞–∫—Ü–∏–π', value='–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∞–∫—Ü–∏–π –Ω–∞–ø–∏—à–∏—Ç–µ `buystock <–Ω–∞–∑–≤–∞–Ω–∏–µ>` –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫—Ü–∏–∏ –≤–∏–¥–Ω—ã –≤ –æ–∫–Ω–µ –±–∏—Ä–∂–∏', inline=True)
        emb.add_field(name='–¢–æ—Ä–≥–æ–≤–ª—è', value='–î–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å: `trade <—Å –∫–µ–º> <—á—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ> <—á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–∑–∞–º–µ–Ω>`. –¢–æ—Ä–≥–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ –¥–µ–Ω—å–≥–∞–º–∏ –∏ —Ñ–∏—Ä–º–∞–º–∏', inline=True)
        emb.add_field(name='–ü–æ–∫—É–ø–∫–∞/–ø—Ä–æ–¥–∞–∂–∞ —Ñ–∏–ª–∏–∞–ª–æ–≤', value='–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏—Ä–º—É –¥–ª—è –∞–ø–≥—Ä–µ–π–¥–∞ –∏ –ø–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∞–∫—Ü–∏—é –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ. –û–∫–Ω–æ –ø—Ä–æ–¥–∞–∂–∏: `sell`, –æ–∫–Ω–æ –ø–æ–∫—É–ø–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ', inline=True)
        emb.add_field(name='–ö—Ä–µ–¥–∏—Ç', value='–ü–æ—Å–ª–µ 10 —Ä–∞—É–Ω–¥–∞ –º–æ–∂–Ω–æ –≤–∑—è—Ç—å –¥–µ–Ω—å–≥–∏ –≤ –∫—Ä–µ–¥–∏—Ç: $5000 –Ω–∞ 20 —Ä–∞—É–Ω–¥–æ–≤ –∏–ª–∏ $10000 –Ω–∞ 10 —Ä–∞—É–Ω–¥–æ–≤. `credit <—Å—É–º–º–∞>`', inline=True)
        emb.add_field(name='–í—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞', value='–î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∏–º—è –∏–≥—Ä–æ–∫–∞. –ü–æ–¥–æ–π–¥—ë—Ç —á—Ç–æ —É–≥–æ–¥–Ω–æ: –µ–≥–æ –Ω–∏–∫, id –∏–ª–∏ mention –≤ –¥–∏—Å–∫–æ—Ä–¥–µ, –¥–∞–∂–µ –∫–≤–∞–¥—Ä–∞—Ç–∏–∫ —Å —Ü–≤–µ—Ç–æ–º', inline=True)
        emb.add_field(name='–ò –¥–∞, –ø–æ–¥ —Å—É–º–º–æ–π $5000 –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è $5000k, —Ç–æ –µ—Å—Ç—å 5 –º–∏–ª–ª–∏–æ–Ω–æ–≤', value='–ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!',inline=False)
        await self.monop_channel.send(embed=emb)

    @commands.Cog.listener()
    async def on_message(self, mes):
        if not self.on or mes.channel.id != self.monop_channelid:
            return
        if bool(mes.author.id == self.bot.user.id) ^ bool('‚ÜØAI' in mes.content):
            return
        if mes.content.startswith('-'):
            return
        if self.ongame:
            if mes.content.lower().startswith('buystock'):
                await mes.delete()
                shop = mes.content.split('buystock')[1].split('‚ÜØAI')[0].replace(' ', '').lower()
                for i in self.stocks:
                    if i['shop'].replace(' ', '').lower() == shop:
                        for p in self.players:
                            if p.id == i['player']:
                                for j in range(len(self.map.blocks)):
                                    s = self.map.blocks[j]
                                    if s.cat == 'shop':
                                        if s.shop == i['shop']:
                                            for pp in self.players:
                                                if mes.author.id == self.bot.user.id:
                                                    ppid = int(mes.content.split('‚ÜØAI')[1])
                                                else:
                                                    ppid = mes.author.id
                                                if pp.id == ppid:
                                                    if pp.money >= i['cost']:
                                                        cur_perc = 100 - sum([s.stocks[a] for a in s.stocks])
                                                        pp.stocks[i['shop']] += i['perc']
                                                        s.stocks[pp.id] += i['perc']
                                                        pp.money -= i['cost']
                                                        if self.ongame['crm_player']:
                                                            if pp == self.ongame['crm_player'] and self.ongame['criminal'] == 'polarize':
                                                                pp.money += i['cost'] * 2
                                                                pp.worth += i['cost']
                                                                await self.monop_channel.send(f'{pp.nick} –≤–µ—Ä–Ω—É–ª —Å–µ–±–µ ${i["cost"]}')
                                                                self.ongame['criminal'] = ''
                                                                self.ongame['crm_player'] = None
                                                        p.money += i['cost']
                                                        if s.stocks[pp.id] > 50:
                                                            if s.in_monopoly:
                                                                for ss in self.map.blocks:
                                                                    if ss.cat == 'shop':
                                                                        if ss.monopoly == s.monopoly:
                                                                            ss.in_monopoly = False
                                                                            p.update_shop(ss)
                                                                del p.monopolies[p.monopolies.index(s.monopoly)]
                                                            s.owner = pp
                                                            s.income = 0
                                                            s.stocks[i['player']] = cur_perc - i['perc']
                                                            p.stocks[i['shop']] = cur_perc - i['perc']
                                                            del pp.stocks[i['shop']]
                                                            del s.stocks[pp.id]
                                                            del p.shops[p.shops.index(s)]
                                                            pp.shops.append(s)
                                                            cur_monopoly = []
                                                            for ss in self.map.blocks:
                                                                if ss.cat == 'shop':
                                                                    if s.monopoly == ss.monopoly:
                                                                        cur_monopoly.append(ss)
                                                            create_monFlag = True
                                                            for ss in cur_monopoly:
                                                                if ss.owner != pp:
                                                                    create_monFlag = False
                                                            if create_monFlag:
                                                                for ss in self.map.blocks:
                                                                    if ss in cur_monopoly:
                                                                        ss.in_monopoly = True
                                                                        pp.update_shop(ss)
                                                                pp.monopolies.append(s.monopoly)
                                                                pp.worth += 1000
                                                            pp.update_shop(s)
                                                        else:
                                                            p.update_shop(s)
                                                        self.map.blocks[j] = s
                                                        p.worth += 500
                                                        pp.worth += 500
                                                        self.update_player(p)
                                                        self.update_player(pp)
                                                        del self.stocks[self.stocks.index(i)]
                                                        await self.monop_channel.send(f'{pp.nick} –ø–æ–∫—É–ø–∞–µ—Ç –∞–∫—Ü–∏—é {s.rodshop} —É {p.nick} ({i["perc"]}%)')
                                                        break
                                            break
                                break
                        break
                if self.stockmes:
                    await self.stockmes.delete()
                    self.stockmes = None
                if self.stocks:
                    emb = discord.Embed(title='–ò–≥—Ä–æ–∫–∏ –≤—ã—Å—Ç–∞–≤–∏–ª–∏ –∞–∫—Ü–∏–∏ —Å–≤–æ–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π –Ω–∞ –ø—Ä–æ–¥–∞–∂—É')
                    for i in self.stocks:
                        for j in range(len(self.map.blocks)):
                            s = self.map.blocks[j]
                            if s.cat == 'shop':
                                if s.shop == i['shop']:
                                    emb.add_field(name=f'{s.shop}', value=f'{s.owner.nick} –≤—ã—Å—Ç–∞–≤–∏–ª {i["perc"]}% –∑–∞ {i["cost"]}\n–ö—É–ø–∏—Ç—å: `buystock {s.shop}`', inline=True)
                                    break
                    self.stockmes = await self.monop_channel.send(embed=emb)
                return
            if mes.author.id == self.ongame['cur_player'].id or (mes.author.id == self.bot.user.id and self.ongame['cur_player'].AI):
                await mes.delete()
                player = self.ongame['cur_player']
                if mes.content.lower().startswith('trade'):
                    trade = mes.content.lower().split('trade ')[1].split(' ')
                    if len(trade) < 3:
                        await self.monop_channel.send(f'trade <–∫–æ–º—É> <—Å—É–º–º–∞/–∫–æ–º–ø–∞–Ω–∏—è> <—Å—É–º–º–∞/–∫–æ–º–ø–∞–Ω–∏—è –≤–∑–∞–º–µ–Ω>', delete_after=20)
                        return
                    trade_to = self.finduser(trade[0])
                    trade_what = ''
                    trade_forwhat = ''
                    twsi = -2
                    tfwsi = -2
                    if re.findall(r'\D', trade[1]):
                        for j in range(len(self.map.blocks)):
                            s = self.map.blocks[j]
                            if s.cat == 'shop':
                                if s.onwer.id == player.id:
                                    if trade[1] in s.shop.lower():
                                        trade_what = s
                                        twsi = j
                                        trade_forwhat = mes.content.split(s.shop.lower())[1].lstrip()
                        if trade_what.in_monopoly:
                            for j in range(len(self.map.blocks)):
                                s = self.map.blocks[j]
                                if s.cat == 'shop':
                                    if s.onwer.id == player.id:
                                        if trade_what.monopoly == s.monopoly:
                                            if s.level > 0:
                                                await self.monop_channel.send(f'{player.nick}, –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —É –º–æ–Ω–æ–ø–æ–ª–∏–∏ –Ω–µ—Ç —Ñ–∏–ª–∏–∞–ª–æ–≤', delete_after=10)
                                                return
                    else:
                        trade_what = int(trade[1])
                        twsi = -1
                        trade_forwhat = mes.content.split(trade[1])[1].lstrip()
                    if re.findall(r'\D', trade_forwhat):
                        for j in range(len(self.map.blocks)):
                            s = self.map.blocks[j]
                            if s.cat == 'shop':
                                if s.onwer.id == trade_to.id:
                                    if trade_forwhat in s.shop.lower():
                                        trade_forwhat = s
                                        tfwsi = j
                        if trade_forwhat.in_monopoly:
                            for j in range(len(self.map.blocks)):
                                s = self.map.blocks[j]
                                if s.cat == 'shop':
                                    if s.onwer.id == player.id:
                                        if trade_forwhat.monopoly == s.monopoly:
                                            if s.level > 0:
                                                await self.monop_channel.send(f'{player.nick}, –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —É –º–æ–Ω–æ–ø–æ–ª–∏–∏ –Ω–µ—Ç —Ñ–∏–ª–∏–∞–ª–æ–≤', delete_after=10)
                                                return
                    else:
                        trade_forwhat = int(trade_forwhat)
                        tfwsi = -1
                    if not trade_forwhat or not trade_what or twsi == -2 or tfwsi == -2:
                        self.monop_channel.send(f'trade <–∫–æ–º—É> <—Å—É–º–º–∞/–∫–æ–º–ø–∞–Ω–∏—è> <—Å—É–º–º–∞/–∫–æ–º–ø–∞–Ω–∏—è –≤–∑–∞–º–µ–Ω>', delete_after=20)
                        return
                    if twsi < 0 and tfwsi < 0:
                        self.monop_channel.send(f'{player.nick}, –Ω–µ–ª—å–∑—è –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –¥–µ–Ω—å–≥–∞–º–∏', delete_after=10)
                        return
                    emb = discord.Embed(title='–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞')
                    if twsi < 0:
                        emb.add_field(name='–û–±–º–µ–Ω—è—Ç—å', value=f'**{player.nick}**\n${trade_what}', inline=True)
                    else:
                        emb.add_field(name='–û–±–º–µ–Ω—è—Ç—å', value=f'**{player.nick}**\n{trade_what.shop} {trade_what.raw_icon}{trade_what.level*"‚òÖ"}', inline=True)
                    if tfwsi < 0:
                        emb.add_field(name='–ù–∞', value=f'**{trade_to.nick}**\n${trade_forwhat}', inline=True)
                    else:
                        emb.add_field(name='–ù–∞', value=f'**{trade_to.nick}**\n{trade_forwhat.shop} {trade_forwhat.raw_icon}{trade_forwhat.level*"‚òÖ"}', inline=True)
                    self.trademes = await mes.channel.send(embed=emb)
                    await self.trademes.add_reaction('‚òëÔ∏è')
                    await self.trademes.add_reaction('üí¢')
                    if twsi < 0:
                        self.w8react.append(('trade_ms', self.trademes, trade_to, [player, trade_what, trade_forwhat]))
                    elif tfwsi < 0:
                        self.w8react.append(('trade_sm', self.trademes, trade_to, [player, trade_what, trade_forwhat]))
                    else:
                        self.w8react.append(('trade_ss', self.trademes, trade_to, [player, trade_what, trade_forwhat]))
                    return
                if mes.content.lower().startswith('sell'):
                    tosell, emb = self.ongame['cur_player'].to_sell(False)
                    if tosell:
                        self.sellmes = await mes.channel.send(embed=emb)
                        for e in tosell:
                            await self.sellmes.add_reaction(e)
                        self.w8react.append(('sell', self.sellmes, mes.author))
                    return
                if mes.content.lower().startswith('credit'):
                    if self.ongame['round'] < 10:
                        await self.monop_channel.send(f'{player.nick}, –Ω–µ–ª—å–∑—è –±—Ä–∞—Ç—å –∫—Ä–µ–¥–∏—Ç—ã –¥–æ 10 —Ä–∞—É–Ω–¥–∞', delete_after=10)
                        return
                    if self.credits[player.id]:
                        await self.monop_channel.send(f'{player.nick}, —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∫—Ä–µ–¥–∏—Ç', delete_after=10)
                        return
                    credit = int(mes.content.split('credit')[1].split('‚ÜØAI')[0])
                    if credit not in [5000, 10000]:
                        await self.monop_channel.send(f'{player.nick}, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:\n5000 –Ω–∞ 20 —Ä–∞—É–Ω–¥–æ–≤, 10000 –Ω–∞ 10 —Ä–∞—É–Ω–¥–æ–≤', delete_after=20)
                        return
                    credit_dict = {5000: 20, 10000: 10}
                    pay_dict = {5000: 7000, 10000: 11000}
                    for p in self.players:
                        if p.id == player.id:
                            p.money += credit
                            p.worth += 500
                            self.credits[p.id] = {'money': credit, 'expires': credit_dict[credit], 'pay': pay_dict[credit]}
                            p.credit = self.credits[p.id]
                            self.update_player(p)
                            await self.monop_channel.send(f'{p.nick} –≤–∑—è–ª –≤ –∫—Ä–µ–¥–∏—Ç ${credit} –Ω–∞ {adb.postfix(self.credits[p.id]["expires"], ["—Ö–æ–¥", "—Ö–æ–¥–∞", "—Ö–æ–¥–æ–≤"])}')
                    return
                if self.ongame['status'] == 'cubes':
                    self.ongame['status'] = 'action'
                    pol = self.ongame['cur_player'].money
                    if self.stockmes:
                        await self.stockmes.delete()
                        self.stockmes = None
                    if self.stocks:
                        emb = discord.Embed(title='–ò–≥—Ä–æ–∫–∏ –≤—ã—Å—Ç–∞–≤–∏–ª–∏ –∞–∫—Ü–∏–∏ —Å–≤–æ–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π –Ω–∞ –ø—Ä–æ–¥–∞–∂—É')
                        for i in self.stocks:
                            for j in range(len(self.map.blocks)):
                                s = self.map.blocks[j]
                                if s.cat == 'shop':
                                    if s.shop == i['shop']:
                                        emb.add_field(name=f'{s.shop}', value=f'{s.owner.nick} –≤—ã—Å—Ç–∞–≤–∏–ª {i["perc"]}% –∑–∞ {i["cost"]}\n–ö—É–ø–∏—Ç—å: `buystock {s.shop}`', inline=True)
                                        break
                        self.stockmes = await self.monop_channel.send(embed=emb)
                        for p in self.players:
                            if p.AI:
                                if adb.chance(25):
                                    ac = random.choice(self.stocks)
                                    await self.ai_processing(p, 'buystock', ac)
                                    break
                    retFlag = False
                    if self.ongame['cur_player'].jailed:
                        random.seed(mes.content)
                        vs = [random.randint(1, 6) for _ in range(self.ongame['cur_player'].cubes)]
                        cubes = [Cube(vs[i]) for i in range(self.ongame['cur_player'].cubes)]
                        player = self.ongame["cur_player"]
                        if mes.content.lower().startswith('aaa') or mes.content.lower().startswith('–∞–∞–∞') or self.ongame['cur_player'].AI:
                            if vs[0] == vs[1]:
                                player.jailed = False
                                self.update_player(player)
                                self.map.inject_cubes(cubes, sum(vs))
                                self.map.move_player(player, sum(vs))
                                self.curblock = self.map.blockinfo(player, self.players)
                                self.map.show_shops(self.players, player)
                                self.update_player(player)
                                await self.monop_channel.send(f'{self.ongame["cur_player"].nick} –≤—ã–±—Ä–æ—Å–∏–ª –¥—É–±–ª—å –∏ —Ç–µ–ø–µ—Ä—å –≥–ª–æ—Ç–∞–µ—Ç —Å–≤–µ–∂–∏–π –≤–æ–∑–¥—É—Ö')
                            else:
                                await self.monop_channel.send(f'{self.ongame["cur_player"].nick}, –≤—ã –æ—Å—Ç–∞—ë—Ç–µ—Å—å –≤ —Ç—é—Ä—å–º–µ, –∂—Ä–∏—Ç–µ –º—ã–ª–æ!')
                                retFlag = True
                        else:
                            await self.monop_channel.send(f'{self.ongame["cur_player"].nick}, –≤—ã –≤ —Ç—é—Ä—å–º–µ, —Å—á–∏—Ç–∞–π—Ç–µ –º—ã–ª–æ!')
                            retFlag = True
                    else:
                        await self.cubes(mes, self.ongame['cur_player'])
                    if retFlag:
                        if self.infomes:
                            await self.infomes.delete()
                            self.infomes = None
                        if self.sellmes:
                            await self.sellmes.delete()
                            self.sellmes = None
                        del_list = []
                        for s in self.credits:
                            if s == self.ongame['cur_player'].id:
                                self.credits[s]['expires'] -= 1
                                if self.credits[s]['expires'] == 0:
                                    for p in self.players:
                                        if p.id == s:
                                            p.money -= self.credits[s]['pay']
                                            del_list.append(p.id)
                                            p.credit = defaultdict(int)
                                            self.update_player(p)
                        for d in del_list:
                            del self.credits[d]
                        for p in self.pledges:
                            if p == self.ongame['cur_player'].id:
                                for s in self.pledges[p]:
                                    self.pledges[p][s] -= 1
                                    if self.pledges[p][s] == 0:
                                        self.sellshop(p, s)
                        del_list = []
                        for t in range(len(self.timers)):
                            if self.timers[t]['name'] == 'jail':
                                self.timers[t]['expires'] -= 1
                                if self.timers[t]['expires'] == 0:
                                    del_list.append(self.timers[t])
                                    self.timers[t]['player'].jailed = False
                                    self.update_player(self.timers[t]['player'])
                            if self.timers[t]['name'] == 'cube':
                                if self.timers[t]['player'] == self.ongame['cur_player']:
                                    self.timers[t]['expires'] -= 1
                                    if self.timers[t]['expires'] == 0:
                                        del_list.append(self.timers[t])
                                        self.timers[t]['player'].cubes = 2
                                        self.update_player(self.timers[t]['player'])
                            if self.timers[t]['name'] == 'death':
                                if self.timers[t]['player'] == self.ongame['cur_player']:
                                    self.timers[t]['expires'] -= 1
                                    if self.timers[t]['expires'] == 0:
                                        del_list.append(self.timers[t])
                                        self.w8react.append(('death', '', self.timers[t]['player']))
                        for d in del_list:
                            del self.timers[self.timers.index(d)]
                        for p in self.players:
                            deathFlag = False
                            for t in range(len(self.timers)):
                                if self.timers[t]['name'] == 'death' and self.timers[t]['player'] == p:
                                    deathFlag = True
                            if p.money < 0 and not deathFlag:
                                days = random.randint(1, 2)
                                daysword = {1: '–¥–µ–Ω—å', 2: '–¥–Ω—è'}
                                await self.monop_channel.send(f'{p.nick}, –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–µ–Ω—å–≥–∏! –ó–∞ –≤–∞–º–∏ –ø—Ä–∏–¥—ë—Ç –≥—Ä–µ—á–µ—Å–∫–∞—è –º–∞—Ñ–∏—è, –µ—Å–ª–∏ –Ω–µ –æ—Ç–¥–∞–¥–∏—Ç–µ –¥–æ–ª–≥–∏ —á–µ—Ä–µ–∑ {days} {daysword[days]}')
                                self.timers.append({'name': 'death', 'expires': days, 'player': p})
                        self.ongame['status'] = 'cubes'
                        self.ongame['cp_id'] += 1
                        if self.ongame['cp_id'] >= len(self.players):
                            self.ongame['cp_id'] -= len(self.players)
                            self.ongame['round'] += 1
                        br = 1
                        while not self.players[self.ongame['cp_id']].ikiru:
                            self.ongame['cp_id'] += 1
                            br += 1
                            if br >= len(self.players):
                                emb = discord.Embed(title='–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞!', color=random.choice(adb.raincolors))
                                for p in self.players:
                                    if not p.ikiru:
                                        text = f'–ú—ë—Ä—Ç–≤))'
                                    else:
                                        text = f'${p.money}\n‚àë{p.get_netmort()}'
                                    if p.slaps:
                                        text += f' {slap}{p.slaps}'
                                    if p.worth:
                                        text += f'\n–û—á–∫–∏: {p.worth}'
                                    emb.add_field(name=f'{p.nick}', value=text, inline=False)  # —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–æ–≤, –±–∞–ª–∞–Ω—Å, –∫–æ—Ä–¥—ã –∏ –∑–≤—ë–∑–¥—ã
                                await self.monop_channel.send(embed=emb)
                                self.on = False
                                break  # –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
                        player = self.ongame['cur_player']
                        if self.ongame['crm_player']:
                            if player == self.ongame['crm_player'] and self.ongame['criminal'] == 'polarize':
                                if player.money < pol:
                                    player.money += (pol - player.money) * 2
                                    player.worth += (pol - player.money)
                                    await self.monop_channel.send(f'{player.nick} –≤–µ—Ä–Ω—É–ª —Å–µ–±–µ ${(pol - player.money) * 2}')
                            self.ongame['criminal'] = ''
                            self.ongame['crm_player'] = None
                            self.update_player(player)
                        self.ongame['cur_player'].update_shop(self.map.blocks[self.ongame['cur_player'].si])
                        self.curblock = self.map.blockinfo(self.ongame["cur_player"], self.players)
                        self.ongame['cur_player'] = self.players[self.ongame['cp_id']]
                        await self.monop_channel.send(random.choice(moves).format(self.ongame['cur_player'].nick))
                        await self.showmap()
                        if self.ongame['cur_player'].AI:
                            await self.ai_processing(self.ongame['cur_player'], 'cubes', mes.content)
                        return
                    self.upgradeFlag = True
                    if self.ongame['cur_player'].AI:
                        await self.ai_processing(self.ongame['cur_player'], 'up', '')
                    else:
                        toup, emb = self.ongame['cur_player'].to_upgrade()
                        if toup:
                            if self.infomes:
                                await self.infomes.delete()
                                self.infomes = None
                            self.infomes = await self.monop_channel.send(embed=emb)
                            for e in toup:
                                await self.infomes.add_reaction(e)
                            self.w8react.append(('up', self.infomes, mes.author))
                    block = self.map.blocks[self.ongame['cur_player'].si]
                    if block.cat == 'shop':
                        if block.owner:
                            if self.ongame['cur_player'].id != block.owner.id:
                                if not block.buyback:
                                    if self.ongame['cur_player'].AI:
                                        await self.ai_processing(self.ongame['cur_player'], 'pay', block.get_mort())
                                    elif self.ongame['cur_player'].money < block.get_mort():
                                        await self.sellsend()
                                else:
                                    await self.ai_processing(self.ongame['cur_player'], 'idle', block.get_mort())
                            elif self.ongame['cur_player'].AI:
                                await self.ai_processing(self.ongame['cur_player'], 'stocks', '')
                        elif self.ongame['cur_player'].AI:
                            await self.ai_processing(self.ongame['cur_player'], 'buy', block.cost)
                        await self.showmap()
                    else:
                        await self.passion(mes)
                elif self.ongame['status'] == 'action':
                    pol = self.ongame['cur_player'].money
                    if self.infomes:
                        await self.infomes.delete()
                        self.infomes = None
                    if self.sellmes:
                        await self.sellmes.delete()
                        self.sellmes = None
                    if self.stockmes:
                        await self.stockmes.delete()
                        self.stockmes = None
                    del_list = []
                    for s in self.credits:
                        if s == self.ongame['cur_player'].id:
                            self.credits[s]['expires'] -= 1
                            if self.credits[s]['expires'] == 0:
                                for p in self.players:
                                    if p.id == s:
                                        p.money -= self.credits[s]['pay']
                                        del_list.append(p.id)
                                        p.credit = defaultdict(int)
                                        self.update_player(p)
                    for d in del_list:
                        del self.credits[d]
                    for p in self.pledges:
                        if p == self.ongame['cur_player'].id:
                            for s in self.pledges[p]:
                                self.pledges[p][s] -= 1
                                if self.pledges[p][s] == 0:
                                    self.sellshop(p, s)
                    del_list = []
                    for t in range(len(self.timers)):
                        if self.timers[t]['name'] == 'jail':
                            self.timers[t]['expires'] -= 1
                            if self.timers[t]['expires'] == 0:
                                del_list.append(self.timers[t])
                                self.timers[t]['player'].jailed = False
                                self.update_player(self.timers[t]['player'])
                        if self.timers[t]['name'] == 'cube':
                            if self.timers[t]['player'] == self.ongame['cur_player']:
                                self.timers[t]['expires'] -= 1
                                if self.timers[t]['expires'] == 0:
                                    del_list.append(self.timers[t])
                                    self.timers[t]['player'].cubes = 2
                                    self.update_player(self.timers[t]['player'])
                        if self.timers[t]['name'] == 'death':
                            if self.timers[t]['player'] == self.ongame['cur_player']:
                                self.timers[t]['expires'] -= 1
                                if self.timers[t]['expires'] == 0:
                                    del_list.append(self.timers[t])
                                    self.w8react.append(('death', '', self.timers[t]['player']))
                    for d in del_list:
                        del self.timers[self.timers.index(d)]
                    for p in self.players:
                        deathFlag = False
                        for t in range(len(self.timers)):
                            if self.timers[t]['name'] == 'death' and self.timers[t]['player'] == p:
                                deathFlag = True
                        if p.money < 0 and not deathFlag:
                            days = random.randint(1, 2)
                            daysword = {1: '–¥–µ–Ω—å', 2: '–¥–Ω—è'}
                            await self.monop_channel.send(f'{p.nick}, –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–µ–Ω—å–≥–∏! –ó–∞ –≤–∞–º–∏ –ø—Ä–∏–¥—ë—Ç –≥—Ä–µ—á–µ—Å–∫–∞—è –º–∞—Ñ–∏—è, –µ—Å–ª–∏ –Ω–µ –æ—Ç–¥–∞–¥–∏—Ç–µ –¥–æ–ª–≥–∏ —á–µ—Ä–µ–∑ {days} {daysword[days]}')
                            self.timers.append({'name': 'death', 'expires': days, 'player': p})
                    for i in self.w8react:
                        if i[0] == 'death' or i[0] == 'suicide':
                            if i[2].money < 0 or i[0] == 'suicide':
                                if adb.chance(10) and i[0] == 'death':
                                    await self.monop_channel.send(f'–°–º–µ—Ä—Ç—å –ø—ã—Ç–∞–µ—Ç—Å—è —Å–ø–∞—Å—Ç–∏ –ø–∞—Ä–Ω–∏—à—É {i[2].nick} –æ—Ç –≥–∏–±–µ–ª–∏, –∑–∞–±–∞—à–ª—è–≤ –µ–º—É $5000. –î–∞–≤–∞–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ —ç—Ç–æ')
                                    await asyncio.sleep(5)
                                    i[2].money += 5000
                                    if i[2].money < 0:
                                        await self.monop_channel.send(f'–°—Ç–∞—Ä–∏–Ω–∞ –°–º–µ—Ä—Ç—å –Ω–µ —Å–º–æ–≥ —Å–ø–∞—Å—Ç–∏ {i[2].nick}. –ü–∞—Ä–µ–Ω—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–¥–æ–ª–∂–∞–ª –∏ —Ç–µ–ø–µ—Ä—å –∏–¥—ë—Ç –≤ –¢–∞—Ä—Ç–∞—Ä —Ä–∞–±–æ—Ç–∞—Ç—å ~~–º–∏–Ω–µ—Ç—á–∏–∫–æ–º –¶–µ—Ä–±–µ—Ä—É~~ –Ω–∞ —Ä—É–¥–Ω–∏–∫–∏ –°–∏–∑–∏—Ñ–∞')
                                    else:
                                        i[2].worth += 5000
                                        await self.monop_channel.send(f'–°–º–µ—Ä—Ç—å —Å–ø–∞—Å {i[2].nick}, –æ–¥–æ–ª–∂–∏–≤ –µ–º—É –¥–µ–Ω–µ–≥. –ù–µ –≤–æ–ª–Ω—É–π—Å—è, –≤–µ—Ä–Ω—ë—à—å –≤ —Å–ª–µ–¥—É—é—â–µ–π –∂–∏–∑–Ω–∏!')
                                        self.update_player(i[2])
                                        continue
                                for j in range(len(self.map.blocks)):
                                    s = self.map.blocks[j]
                                    if s.cat == 'shop':
                                        if i[2] == s.owner:
                                            s.level = 0
                                            s.owner = None
                                            s.worth = 0
                                            s.income = 0
                                            s.in_monopoly = False
                                            s.buyback = False
                                            s.stocks = defaultdict(int)
                                            self.map.blocks[j] = s
                                i[2].ikiru = False
                                self.update_player(i[2])
                                emb = discord.Embed(title=f"–ú–∏–Ω—É—Å –æ–¥–∏–Ω", description=f"{i[2].nick}, –≤—ã —É–º–µ—Ä–ª–∏! –£–¥–∞—á–∏ –Ω–∞ —Ç–æ–º —Å–≤–µ—Ç–µ!\n–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á—ë—Ç:{i[2].networth()}")
                                await self.monop_channel.send(embed=emb)
                    self.w8react = []
                    self.ongame['status'] = 'cubes'
                    self.map.unject_cubes()
                    self.ongame['cp_id'] += 1
                    if self.ongame['cp_id'] >= len(self.players):
                        self.ongame['cp_id'] -= len(self.players)
                        self.ongame['round'] += 1
                    br = 1
                    while not self.players[self.ongame['cp_id']].ikiru:
                        self.ongame['cp_id'] += 1
                        br += 1
                        if br >= len(self.players):
                            emb = discord.Embed(title='–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞!', color=random.choice(adb.raincolors))
                            for p in self.players:
                                if not p.ikiru:
                                    text = f'–ú—ë—Ä—Ç–≤))'
                                else:
                                    text = f'${p.money}\n‚àë{p.get_netmort()}'
                                if p.slaps:
                                    text += f' {slap}{p.slaps}'
                                if p.worth:
                                    text += f'\n–û—á–∫–∏: {p.worth}'
                                emb.add_field(name=f'{p.nick}', value=text,
                                              inline=False)  # —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–æ–≤, –±–∞–ª–∞–Ω—Å, –∫–æ—Ä–¥—ã –∏ –∑–≤—ë–∑–¥—ã
                            await self.monop_channel.send(embed=emb)
                            self.on = False
                            break  # –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
                    player = self.ongame['cur_player']
                    if self.ongame['crm_player']:
                        if player == self.ongame['crm_player'] and self.ongame['criminal'] == 'polarize':
                            if player.money < pol:
                                player.money += (pol - player.money) * 2
                                player.worth += (pol - player.money)
                                await self.monop_channel.send(f'{player.nick} –≤–µ—Ä–Ω—É–ª —Å–µ–±–µ ${(pol - player.money) * 2}')
                            self.ongame['criminal'] = ''
                            self.ongame['crm_player'] = None
                            self.update_player(player)
                    await self.action(mes, self.ongame['cur_player'], self.players[self.ongame['cp_id']])
                    self.ongame['cur_player'] = self.players[self.ongame['cp_id']]
                    await self.showmap()
                    await self.monop_channel.send(random.choice(moves).format(self.ongame['cur_player'].nick))
                    if self.ongame['cur_player'].AI:
                        await self.ai_processing(self.ongame['cur_player'], 'cubes', mes.content)
            return

        if mes.content == '+AI':
            await mes.delete()
            if len(self.players) > len(player_colors):
                await mes.channel.send(f"{mes.author.mention}, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤",
                                       delete_after=5)
                return
            color_idx = random.randrange(0, len(self.player_colors))
            color = self.player_colors[color_idx]
            del self.player_colors[color_idx]
            emo_idx = random.randrange(0, len(self.ai_emos))
            emo = self.ai_emos[emo_idx]
            del self.ai_emos[emo_idx]
            name_idx = random.randrange(0, len(self.ai_names))
            name = self.ai_names[name_idx]
            del self.ai_names[name_idx]
            self.players.append(Player(mes.author, emo, color, self.map.type, name))
            await mes.channel.send(f'{name} {emo}, –≤–∞—à —Ü–≤–µ—Ç ‚Äî {color}')

        if mes.content == '+':
            await mes.delete()
            for p in self.players:
                if p.id == mes.author.id:
                    await mes.channel.send(f"{mes.author.mention}, –≤—ã —É–∂–µ –∏–≥—Ä–∞–µ—Ç–µ", delete_after=5)
                    return
            if len(self.players) > len(player_colors):
                await mes.channel.send(f"{mes.author.mention}, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤", delete_after=5)
                return
            emos = self.emosdict[self.userlist[mes.author.id]['bbagid']]
            if not emos:
                emos = self.emos
            mes_one = await mes.channel.send(f"{mes.author.mention}\nCHOOSE YOUR HERO", delete_after=25)
            mes_two = await mes.channel.send(f"{' '.join(emos)}", delete_after=25)
            for e in emos:
                await mes_two.add_reaction(e)
            self.w8react.append((mes_one, mes_two, mes.author))

        if mes.content == '++':
            await mes.delete()
            if len(self.players) < 2:
                await mes.channel.send(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤!", delete_after=5)
                return
            self.monop_channel = self.bot.get_channel(self.monop_channelid)
            self.map = Map(self.maptype)
            random.shuffle(self.players)
            self.ongame = {'cp_id': 0, 'cur_player': self.players[0], 'status': 'cubes', 'round': 1, 'criminal': '', 'crm_player': None}
            self.w8react = []
            await self.mhelp()
            self.map.show_colors(self.players[1])
            await self.showmap()
            await mes.channel.send(f"–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!")
            await mes.channel.send(f"–î–ª—è –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç –∑–µ—Ä–Ω–æ. –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞ –ø–µ—Ä–µ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ—Å—Ç–∞–≤—å—Ç–µ -. –ü–µ—Ä–≤—ã–º —Ö–æ–¥–∏—Ç {self.ongame['cur_player'].men}!")
            if self.ongame['cur_player'].AI:
                await self.ai_processing(self.ongame['cur_player'], 'cubes', mes.content)

    @commands.command()
    async def monopoly_test(self, ctx, ais=0, t: int = 2):
        if self.ongame:
            await ctx.send(f"–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å!", delete_after=10)
            return
        if not self.monop_channelid == ctx.channel.id:
            if self.monop_channel:
                monop_channel = self.bot.get_channel(self.monop_channelid)
                await ctx.send(f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ. –ò–≥—Ä–∞—Ç—å –≤ {monop_channel.mention}", delete_after=10)
            else:
                await ctx.send("–£ –Ω–∞—Å –Ω–µ—Ç –∫–∞–Ω–∞–ª–∞ –¥–ª—è –º–æ–Ω–æ–ø–æ–ª–∏–∏. –ó–∞–¥–∞—Ç—å –∫–∞–Ω–∞–ª –∫–æ–º–∞–Ω–¥–æ–π **monop_setchannel**", delete_after=10)
            return
        evrv = ctx.guild.default_role
        await self.monop_channel.set_permissions(evrv, view_channel=True)
        self.map = Map(t)
        self.on = True
        self.player_colors = [pc for pc in player_colors]
        self.ai_names = [a for a in ai_names]
        self.ai_emos = [e for e in ai_emos]
        noPlayer = False
        if ais < 0:
            ais = abs(ais)
            noPlayer = True
        colors = adb.sevranchoice(self.player_colors, ais+1)
        emos = adb.sevranchoice(self.ai_emos, ais)
        names = adb.sevranchoice(self.ai_names, ais)
        for i in range(ais+1):
            if i == ais:
                if not noPlayer:
                    self.players.append(Player(ctx.author, 'ü§™', colors[i], t))
                    await ctx.channel.send(f'{ctx.author.mention} ü§™, –≤–∞—à —Ü–≤–µ—Ç ‚Äî {colors[i]}')
            else:
                self.players.append(Player(ctx.author, emos[i], colors[i], t, ai=names[i]))
                await ctx.channel.send(f'{names[i]} {emos[i]}, –≤–∞—à —Ü–≤–µ—Ç ‚Äî {colors[i]}')
        self.monop_channel = self.bot.get_channel(self.monop_channelid)
        random.shuffle(self.players)
        self.ongame = {'cp_id': 0, 'cur_player': self.players[0], 'status': 'cubes', 'round': 1, 'criminal': '', 'crm_player': None}
        self.w8react = []
        await self.mhelp()
        self.map.show_colors(self.players[1])
        await self.showmap()
        await ctx.send(f"–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!")
        if self.ongame['cur_player'].AI:
            await self.ai_processing(self.ongame['cur_player'], 'cubes', ctx.message.content)

    @commands.command()
    async def monopoly_stop(self, ctx):
        self.maptype = 0
        self.map = None
        self.mapmes = None
        self.playmes = None
        self.infomes = None
        self.sellmes = None
        self.stockmes = None
        self.trademes = None
        self.curblock = ''
        self.players = []
        self.player_colors = []
        self.w8react = []
        self.on = False
        self.ongame = {}
        self.credits = defaultdict(dict)
        self.pledges = defaultdict(dict)
        self.stocks = []
        self.upgradeFlag = False
        self.userlist = defaultdict(dict)
        self.emosdict = defaultdict(list)
        self.emos = []
        self.ai_emos = []
        self.ai_names = []
        self.timers = []

    @commands.command()
    async def monopoly_pause(self, ctx):
        self.on = False

    @commands.command()
    async def monopoly_on(self, ctx):
        self.on = True

    @commands.command()
    async def monopoly_help(self, ctx):
        await self.mhelp()

    @commands.command()
    async def monopoly(self, ctx, t=0):
        if self.monop_channel:
            evrv = ctx.guild.default_role
            await self.monop_channel.set_permissions(evrv, view_channel=True)
        if t == 'help':
            await self.mhelp()
            return
        if self.ongame:
            await ctx.send(f"–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å!", delete_after=10)
            return
        if not self.monop_channelid == ctx.channel.id:
            if self.monop_channel:
                monop_channel = self.bot.get_channel(self.monop_channelid)
                await ctx.send(f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ. –ò–≥—Ä–∞—Ç—å –≤ {monop_channel.mention}", delete_after=10)
            else:
                await ctx.send("–£ –Ω–∞—Å –Ω–µ—Ç –∫–∞–Ω–∞–ª–∞ –¥–ª—è –º–æ–Ω–æ–ø–æ–ª–∏–∏. –ó–∞–¥–∞—Ç—å –∫–∞–Ω–∞–ª –∫–æ–º–∞–Ω–¥–æ–π **monop_setchannel**", delete_after=10)
            return

        self.maptype = int(t)
        self.map = Map(self.maptype)

        db = sqlite3.connect(os.path.join(self.DIR, "Akari.db"))
        SQL = db.cursor()

        for m in ctx.guild.members:
            try:
                SQL.execute(f'SELECT bbagid, name, roleid FROM exp WHERE id = {m.id} AND server = {ctx.guild.id}')
                data = SQL.fetchone()
                self.userlist[m.id] = {'id': m.id, 'bbagid': int(data[0]), 'name': data[1], 'roleid': int(data[2])}
            except:
                pass
        db.close()

        self.on = True
        self.player_colors = [pc for pc in player_colors]
        self.emos = [e for e in emos]
        self.ai_names = [a for a in ai_names]
        self.ai_emos = [e for e in ai_emos]
        await ctx.send("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–æ–Ω–æ–ø–æ–ª–∏—é! –°—Ç–∞–≤—å—Ç–µ +, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è, –∏ ++, —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –Ω–∞–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤")

    @commands.command()
    async def monop_setchannel(self, ctx):
        self.monop_channelid = ctx.channel.id
        self.monop_channel = ctx.channel
        await ctx.send(f"–ú–æ–Ω–æ–ø–æ–ª–∏—è —Ç–µ–ø–µ—Ä—å –≤ –∫–∞–Ω–∞–ª–µ {ctx.channel.mention}", delete_after=10)

    @commands.command()
    async def monopoly_hide(self, ctx, t=0):
        evrv = ctx.guild.default_role
        await self.monop_channel.set_permissions(evrv, view_channel=False)


class Shop:
    def __init__(self, cords, data, number):
        self.cat = 'shop'
        self.shop = data['name']
        self.vinshop = data['name']
        self.rodshop = data['name']
        if 'vin' in data['special']:
            self.vinshop = data['special']['vin']
        if 'rod' in data['special']:
            self.rodshop = data['special']['rod']
        self.monopoly = data['mon_name']
        self.cost = data['buyfor']
        self.mortgage = [self.cost//10, self.cost//2, self.cost, self.cost*2, self.cost*3, self.cost*5]
        self.up = data['up']
        self.icons = iconfinder(data['brief'])
        self.icon = self.icons[0]
        self.raw_icon = self.icons[0]
        self.special = data['special']
        self.level = 0
        self.owner = None
        self.cords = cords
        self.number = number
        self.desc = ''
        self.worth = data['buyfor']
        self.income = 0
        self.in_monopoly = False
        self.buyback = False
        self.stocks = defaultdict(int)
        self.anomale = False

    def get_mort(self):
        try:
            res = self.mortgage[self.level]
        except:
            res = self.mortgage[-1]
        return res

    def __eq__(self, other):
        if not hasattr(other, 'shop'):
            if self.shop == other:
                return True
            return False
        if self.shop == other.shop:
            return True
        return False

    def __str__(self):
        return f'{self.shop}{self.raw_icon} {self.cords} owner={self.owner} level={self.level}'


class Special:
    def __init__(self, cords, typ):
        self.cat = 'special'
        self.type = typ
        self.cords = cords
        self.icons = ['<:mss:829981282649899030>', '<:msp:829981282511486977>', '<:msr:829981282310160414>', '<:msj:829981282167029760>', '<:msc:829981281973567499>', '<:msd:829981282830123059>']
        self.icon = self.icons[typ]
        self.brief = ['start', 'police', 'roulette', 'jail', 'criminal', 'ruins']
        self.roulettes = ['<:msr0:829981282486059038>', '<:msr1:829981282946777088>', '<:msr2:829981282036744203>', '<:msr3:829981282586198036>', '<:msr4:829981282464169984>', '<:msr5:829981282569158676>', '<:msr6:829981282200584243>']
        self.desc = ''
        self.chanced = 0


class Bonus:
    def __init__(self, cords, typ):
        self.cat = 'bonus'
        self.type = typ
        self.cords = cords
        self.icon = '<:msb:829981283366076457>'
        self.desc = ''


class Anti:
    def __init__(self, cords, typ):
        self.cat = 'anti'
        self.type = typ
        self.cords = cords
        self.icon = '<:msa:829981282263629835>'
        self.desc = ''


class Cube:
    def __init__(self, value):
        self.value = value
        self.icon = cube_values[value-1]


class Player:
    def __init__(self, mem, icon, color, mt=0, ai=''):
        self.mem = mem
        self.name = mem.display_name
        self.men = mem.mention
        self.id = mem.id
        self.icon = icon
        self.lockicon = locked_icons[player_colors.index(color)]
        self.levelicons = player_color_icons[player_colors.index(color)]
        self.color = color
        self.nick = color + mem.display_name + icon
        self.money = 15000
        self.cords = adb.monop_sequences[mt][0]
        self.si = 0  # sequence_i
        self.shops = []
        self.monopolies = []
        self.credit = defaultdict(int)
        self.stocks = defaultdict(int)
        self.AI = ai
        if ai:
            self.mem = ai + ' <:msi:830199941640618005>'
            self.name = ai
            self.men = ai + ' <:msi:830199941640618005>'
            self.id = random.randint(100000000, 999999999)
            self.nick = color + self.men + icon
        self.worth = 0
        self.jailed = False
        self.slaps = 0
        self.circle = 0
        self.ikiru = True
        self.cubes = 2

    def show_shops(self):
        res = ''
        for m in self.monopolies:
            for s in self.shops:
                if s.monopoly == m:
                    res += s.icon
            res += '‚óà'
        for s in self.shops:
            if s.monopoly not in self.monopolies:
                res += s.icon + ' '
        return res

    def to_upgrade(self, ai=''):
        toup = []
        emb_dict = {m: [] for m in self.monopolies}
        for m in self.monopolies:
            for s in self.shops:
                if s.monopoly == m and s.level < 5 and not s.anomale:
                    if ai:
                        toup.append(s)
                    else:
                        toup.append(s.raw_icon)
                        emb_dict[m].append(f'{s.icon}{s.up}')
        backs = []
        for s in self.shops:
            if s.buyback:
                if ai:
                    backs.append(s)
                else:
                    toup.append(s.raw_icon)
                    backs.append(f'{s.icon}{int(s.cost * 0.6)}')
        if ai:
            return toup, backs
        emb = discord.Embed(title='–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∞–ø–≥—Ä–µ–π–¥–∞')
        for m in self.monopolies:
            if emb_dict[m]:
                emb.add_field(name=m, value=' '.join(emb_dict[m]), inline=True)
        if backs:
            emb.add_field(name='–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–∫—É–ø–∞', value=' '.join(backs), inline=False)
        return toup, emb

    def to_sell(self, pledge=True, ai=''):
        tosell = []
        emb_dict = {m: [] for m in self.monopolies}
        for m in self.monopolies:
            for s in self.shops:
                if s.monopoly == m and s.level > 0:
                    if ai:
                        tosell.append(s)
                    else:
                        tosell.append(s.raw_icon)
                    emb_dict[m].append(f'{s.icon}{int(s.up * 0.5)}')
        pleds = []
        if pledge or ai:
            for m in self.monopolies:
                mFlag = True
                for s in self.shops:
                    if s.monopoly == m and s.level > 0:
                        mFlag = False
                if mFlag:
                    for s in self.shops:
                        if s.monopoly == m:
                            if ai:
                                pleds.append(s)
                            else:
                                tosell.append(s.raw_icon)
                                pleds.append(f'{s.icon}{int(s.cost * 0.5)}')
            for s in self.shops:
                if s.monopoly not in self.monopolies:
                    if ai:
                        pleds.append(s)
                    else:
                        tosell.append(s.raw_icon)
                        pleds.append(f'{s.icon}{int(s.cost * 0.5)}')
        if ai:
            return tosell, pleds
        emb = discord.Embed(title='–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏')
        for m in self.monopolies:
            if emb_dict[m]:
                emb.add_field(name=m, value=' '.join(emb_dict[m]), inline=True)
        if pleds:
            emb.add_field(name='–î–æ—Å—Ç—É–ø–Ω–æ –ø–æ–¥ –∑–∞–ª–æ–≥', value=' '.join(pleds), inline=False)
        return tosell, emb

    def update_shop(self, shop):
        for i in range(len(self.shops)):
            if shop.cat == 'shop':
                if self.shops[i].shop == shop.shop:
                    self.shops[i] = shop

    def get_netmort(self):
        return self.money + int(sum([s.worth for s in self.shops]))

    def get_sellmort(self):
        return self.money + int(sum([s.worth for s in self.shops]) // 2)

    def networth(self):
        res = self.money + self.worth
        return res

    def __eq__(self, other):
        if not other:
            return False
        if self.id == other.id:
            return True
        return False


class Map:
    def __init__(self, typ):
        self.type = typ
        map_grid = adb.monop_maps[typ]
        self.sequence = adb.monop_sequences[typ]
        self.prefs = adb.monop_prefs[typ]
        self.cubes = adb.monop_cubes[typ]
        self.cube_nums = adb.monop_cube_nums[typ]
        sizes = self.prefs[5]
        self.base = [['‚¨õ' for _ in range(sizes[0])] for _ in range(sizes[1])]
        for i in self.cubes:
            self.base[i[0]][i[1]] = 'üßä'
        for i in self.sequence:
            self.base[i[0]][i[1]] = '‚¨ú'
        self.blocks = []
        get_shops, self.monopolies = self.get_shops(self.prefs[0])
        shops_idx = 0
        spec_idx = 0
        bonus_idx = 0
        anti_idx = 0
        bonuses = adb.sevranchoice([1, 2, 3, 4], self.prefs[2])
        antis = adb.sevranchoice([1, 2, 3, 4, 5], self.prefs[3])
        for i, s in enumerate(self.sequence):
            ind = map_grid[s[0]][s[1]]
            obj = None
            if ind == 1:
                obj = Shop(s, get_shops[shops_idx], shops_idx)
                shops_idx += 1
            elif ind == 2:
                obj = Special(s, spec_idx)
                spec_idx += 1
            elif ind == 3:
                obj = Bonus(s, bonuses[bonus_idx])
                bonus_idx += 1
            elif ind == 4:
                obj = Anti(s, antis[anti_idx])
                anti_idx += 1
            self.blocks.append(obj)
        #–Ω–µ –∑–∞–±—ã—Ç—å –±—É–º

    def get_shops(self, count):
        res = []
        shops = [i for i in all_shops if i['special'] != 'add' and i['name'] != 'Disabled']  # –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–Ω–æ–ø–æ–ª–∏–∏
        addictional = [i for i in all_shops if i['special'] == 'add' and i['name'] != 'Disabled']  # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–≥—É—Ç –≤–∫–ª—é—á–∏—Ç—å—Å—è —Å–ª—É—á–∞–π–Ω–æ
        c = 0
        i = 0
        while c != count:  # –∑–∞–ø–æ–ª–Ω—è–µ–º res –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º–∞–≥–∞–∑–æ–≤ = count
            if c > count:   # –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç, –∑–∞–º–µ–Ω—è–µ–º –æ–¥–Ω—É 4-–º–æ–Ω–æ–ø–æ–ª–∏—é –Ω–∞ 3- –∏ —É–¥–∞–ª—è–µ–º –µ—ë –∏–∑ addictional
                idxs = [idx for idx, j in enumerate(res) if j['length'] == 4 and j['special'] != 'shuffled']
                idx = random.choice(idxs)
                res[idx] = random.choice([k for k in addictional if k['length'] == 3])
                del addictional[addictional.index(res[idx])]
                c -= 1
                break
            else:
                res.append(shops[i])
                c += shops[i]['length']
                i += 1

        idxs = []
        for i in addictional: # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–Ω–æ–ø–æ–ª–∏–∏ (—à–∞–Ω—Å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –Ω–µ –∏–º–µ—è –Ω–∏ –æ–¥–Ω–æ–π —Ç–∞–∫–æ–π = 40,5%)
            if adb.chance(14):
                choice_list = [j for j, k in enumerate(res) if k['length'] == i['length'] and k['special'] != 'shuffled' and j not in idxs]
                if choice_list:
                    idx = random.choice(choice_list)
                    idxs.append(idx) # –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –∑–∞–º–µ–Ω—ã –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ –º–æ–Ω–æ–ø–æ–ª–∏–∏ –¥–≤–∞ —Ä–∞–∑–∞
                    res[idx] = i

        monopolies = {} # —Å–ø–∏—Å–æ–∫ –º–æ–Ω–æ–ø–æ–ª–∏–π
        mons = [m for m in res]
        for m in mons:
            monopolies[m['name']] = {'name': m['name'], 'length': m['length'], 'special': m['special']}

        shuffled_monopoly = None
        shuf_idxs = [] # –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –º–æ–Ω–æ–ø–æ–ª–∏–∏, —è—á–µ–π–∫–∏ –∫–æ—Ç–æ—Ä–æ–π —Ä–∞–∑–±—Ä–æ—Å–∞–Ω—ã –ø–æ –≤—Å–µ–π –∫–∞—Ä—Ç–µ
        if_shuf = [k for k in res if k['special'] == 'shuffled']
        if if_shuf:
            space = count // if_shuf[0]['length'] # –¥–ª—è –º–æ–Ω–æ–ø–æ–ª–∏–∏ –¥–ª–∏–Ω–æ–π 4 –∏ count = 31: space = 7
            cur_shuf_idx = space // 2             # –ø–µ—Ä–≤–∞—è –∫–ª–µ—Ç–∫–∞ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –∏–Ω–¥–µ–∫—Å 3 (–æ—Ç—Å—á—ë—Ç –æ—Ç 0)
            shuf_idxs.append(cur_shuf_idx)
            for i in range(1, if_shuf[0]['length']):
                cur_shuf_idx += space             # —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ: 10, 17, 24
                shuf_idxs.append(cur_shuf_idx)    # —Ä–∞–∑—Ä—ã–≤ –º–µ–∂–¥—É –ø–µ—Ä–≤—ã–º –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º: 11 (–≤ —Å–ª—É—á–∞–µ —Å count = 32 –±—É–¥–µ—Ç 8)
            shuffled_monopoly = if_shuf[0]
            del res[res.index(shuffled_monopoly)] # —É–¥–∞–ª—è–µ–º —ç—Ç—É –º–æ–Ω–æ–ø–æ–ª–∏—é –∏–∑ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∏ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ

        result = [{} for _ in range(count)]
        c = 0
        if shuffled_monopoly:
            for i, shop in enumerate(shuffled_monopoly['shops']):
                result[shuf_idxs[i]] = shop
        for mon in res:
            for shop in mon['shops']:
                while result[c]:
                    c += 1
                result[c] = shop
                c += 1
        return result, monopolies

    def blockinfo(self, player, players):
        si = player.si
        block = self.blocks[player.si]
        res = ''
        if block.cat == 'shop':
            res = f'{block.shop} {block.raw_icon}{block.level*"‚òÖ"}\n'
            if block.owner:
                res += f'–í–ª–∞–¥–µ–ª–µ—Ü: {block.owner.nick}\n–ü—Ä–∏–±—ã–ª—å: {block.income}'
                if player.id == block.owner.id:
                    res += f' (–í–∞—à —Ö–æ–¥)'
                    if block.buyback:
                        res += f' (–ü–æ–¥ –∑–∞–ª–æ–≥–æ–º)'
                        res += f'\n–ü–ª–∞—Ç–∞: {block.get_mort()}'
                        return res
                    res += f'\n–ü–ª–∞—Ç–∞: {block.get_mort()}\n'
                    res += f'–ü—Ä–æ–¥–∞—Ç—å –∞–∫—Ü–∏–∏: {block.cost}\n'
                    res += f'`stocks __%` (–¥–æ {100 - sum([block.stocks[a] for a in block.stocks])})'
                else:
                    if block.buyback:
                        res += f' (–ü–æ–¥  –∑–∞–ª–æ–≥–æ–º)'
                        res += f'\n–ü–ª–∞—Ç–∞: {block.get_mort()}'
                        if block.anomale:
                            res += f'\n–≠—Ç–æ—Ç –±–ª–æ–∫ –ø–æ–¥–≤–µ—Ä–≥—Å—è –∞–Ω–æ–º–∞–ª–∏–∏. –í –Ω—ë–º –Ω–µ–ª—å–∑—è —Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª–∏–∞–ª—ã'
                        return res
                    res += f'\n–ü–ª–∞—Ç–∞: {block.get_mort()}\n'
                    res += f'`pay {block.get_mort()}`'
            else:
                res += f'–ö—É–ø–∏—Ç—å: {block.cost}\n'
                res += f'`buy {block.cost}`'
            if block.anomale:
                res += f'\n–≠—Ç–æ—Ç –±–ª–æ–∫ –ø–æ–¥–≤–µ—Ä–≥—Å—è –∞–Ω–æ–º–∞–ª–∏–∏. –í –Ω—ë–º –Ω–µ–ª—å–∑—è —Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª–∏–∞–ª—ã'
        if block.cat == 'special':
            if block.type == 0:
                res = f'–°—Ç–∞—Ä—Ç. –ó–¥–µ—Å—å –ø–æ–ª—É—á–∞—é—Ç –¥–µ–Ω—å–≥–∏. –í—ã –Ω–∞ –∫—Ä—É–≥–µ {player.circle}'
            if block.type == 1:
                if player.jailed:
                    res = f'–í—ã –≤ —Ç—é—Ä—è–∂–∫–µ. –í–æ–∫—Ä—É–≥ –ø–æ–ª–∏—Ç–∑–µ–∫–∏. –ñ–∏–∑–Ω—å –ø–æ –ø–æ–Ω—è—Ç–∏—è–º. –ü–∞–¥–∞—é—â–µ–µ –º—ã–ª–æ. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏, –ø–∏—à–∏—Ç–µ –ê–ê–ê'
                else:
                    jailed = [p.name for p in players if p.jailed]
                    if jailed:
                        res = f'–ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π —É—á–∞—Å—Ç–æ–∫. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞–≤–µ—Å—Ç–∏—Ç—å {", ".join(jailed)}'
                    else:
                        res = f'–ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π —É—á–∞—Å—Ç–æ–∫. –ó–¥–µ—Å—å –ø–æ–∫–∞ –ø—É—Å—Ç–æ (–ø–æ–∫–∞)'
            if block.type == 2:
                res = '–ó–∞–±—Ä–æ—à–µ–Ω–Ω—ã–π –æ—Ä—É–∂–µ–π–Ω—ã–π —Å–∫–ª–∞–¥. –í—ã–±–µ—Ä–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –ø–∞—Ä—Ç–æ–Ω–æ–≤ –∑–∞—Ä—è–¥–∏—Ç—å –≤ —Ä–µ–≤–æ–ª—å–≤–µ—Ä (0-6)'
            if block.type == 3:
                res = '–ó–¥–µ—Å—å —Ç—É—Å—É—é—Ç—Å—è –Ω–∞—Ä–∫–æ–º–∞–Ω—ã. –°—é–¥–∞ —á–∞—Å—Ç–æ –ø—Ä–∏–µ–∑–∂–∞–µ—Ç –ø–æ–ª–∏—Ü–∏—è –∏... –û–Ω–∏ —É–∂–µ –∑–¥–µ—Å—å'
            if block.type == 4:
                res = '–ö—Ä–∏–º–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ—Ç–µ—Ä–µ—è. –í—ã —Å–º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –º–Ω–æ–≥–æ –Ω–µ—Ö–æ—Ä–æ—à–∏—Ö –≤–µ—â–µ–π'
            if block.type == 5:
                res = block.desc
        if block.cat == 'bonus':
            res = '–õ–µ–ø—Ä–µ–∫–æ–Ω—ã —Å–æ–±—Ä–∞–ª–∏ –≤—Å–µ —Å–≤–æ–∏ –¥–µ–Ω—å–≥–∏ –∏ –±–µ–≥—É—Ç —Å—é–¥–∞ –ø–æ —Ä–∞–¥—É–≥–µ. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å—ã'
        if block.cat == 'anti':
            res = '–ü–æ–ø–∞–ª —Å—é–¥–∞ ‚Äî –∂–¥–∏ –±–µ–¥—ã. –û–±–∏—Ç–µ–ª—å –Ω–µ—Å—á–∞—Å—Ç—å—è, —Å—É–µ–≤–µ—Ä–∏–π –∏ –ø–∏—Ü—Ü—ã —Å –∏–∑—é–º–æ–º'
        return res

    def inject_cubes(self, cubes, sum):
        a = adb.sevranchoice(self.cubes, len(cubes))
        for idx, i in enumerate(a):
            self.base[i[0]][i[1]] = cubes[idx].icon
        dec = self.cube_nums[0]
        uni = self.cube_nums[1]
        if sum >= 10:
            self.base[dec[0]][dec[1]] = cube_numbers[sum // 10]
        self.base[uni[0]][uni[1]] = cube_numbers[sum % 10]

    def move_player(self, player, value):
        player.si += value
        if player.si >= len(self.sequence):
            player.si -= len(self.sequence)
            player.circle += 1
            player.money += 2000
        player.cords = self.sequence[player.si]

    def unject_cubes(self):
        for i in self.cubes:
            self.base[i[0]][i[1]] = 'üßä'
        for i in self.cube_nums:
            self.base[i[0]][i[1]] = '‚¨õ'

    def show_colors(self, next_player):
        for idx, i in enumerate(self.sequence):
            if self.blocks[idx].cat == 'shop':
                if self.blocks[idx].owner:
                    if self.blocks[idx].buyback:
                        self.base[i[0]][i[1]] = self.blocks[idx].owner.lockicon
                    elif self.blocks[idx].level > 0:
                        self.base[i[0]][i[1]] = self.blocks[idx].owner.shopcolors[self.blocks[idx].level - 1]
                    else:
                        self.base[i[0]][i[1]] = self.blocks[idx].owner.color
                else:
                    self.base[i[0]][i[1]] = '‚¨ú'
        i = next_player.cords
        self.base[i[0]][i[1]] = next_player.icon

    def show_shops(self, players, cur_player):
        for idx, i in enumerate(self.sequence):
            self.base[i[0]][i[1]] = self.blocks[idx].icon
        for p in players:
            if p.ikiru:
                i = p.cords
                self.base[i[0]][i[1]] = p.icon
        i = cur_player.cords
        self.base[i[0]][i[1]] = cur_player.icon

    def __str__(self):
        monopoly = ''
        for i in self.base:
            for j in i:
                monopoly += j
            monopoly += '\n'
        return monopoly


def setup(bot):
    bot.add_cog(Monopoly(bot))
